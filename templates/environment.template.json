{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "environmentName": {
      "type": "string",
      "metadata": {
        "description": "Abbreviated name for the environment, eg: AT, TEST, PP, PRD"
      }
    },
    "sharedManagementResourceGroup": {
      "type": "string",
      "metadata": {
        "description": "Name of the shared management resource group"
      }
    },
    "sharedKeyVaultName": {
      "type": "string",
      "metadata": {
        "description": "Name of the shared Key Vault for storing the SQL password"
      }
    },
    "sharedKeyVaultId": {
      "type": "string",
      "metadata": {
        "description": "This is necessary because the 'dependsOn' in the subscription template is not waiting for the keyvault to deploy"
      }
    },
    "sqlServerAdminPasswordSecretName": {
      "type": "string",
      "metadata": {
        "description": "The name of the Key Vault secret which contains the SQL Admin password for this environment"
      }
    },
    "sqlServerActiveDirectoryAdminLogin": {
      "type": "string",
      "metadata": {
        "description": "The active directory admin that will be assigned to the sql server"
      }
    },
    "sqlServerActiveDirectoryAdminObjectId": {
      "type": "string",
      "metadata": {
        "description": "The object id of the active directory admin that will be assigned to the sql server"
      }
    },
    "threatDetectionEmailAddress": {
      "type": "string",
      "metadata": {
        "description": "The email address that threat alerts will be sent to"
      }
    },
    "databaseConfiguration": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Configuration object which describes the structure of failovergroups"
      }
    },
    "virtualNetworkAddressSpacePrefix": {
      "type": "string",
      "metadata": {
        "description": "Virtual network address prefix for the environment vnet"
      }
    },
    "virtualNetworkDeploy": {
      "type": "string",
      "metadata": {
        "description": "Deploys the Virtual Network and deletes all subnets if Enabled https://github.com/Azure/azure-quickstart-templates/issues/2786"
      }
    },
    "gatewaySubnetCount": {
      "type": "int",
      "defaultValue": 1,
      "maxValue": 1,
      "metadata": {
        "description": "The number of gateway subnets to provision"
      }
    },
    "managementSubnetCount": {
      "type": "int",
      "defaultValue": 1,
      "maxValue": 1,
      "metadata": {
        "description": "The number of management subnets to provision"
      }
    },
    "apimSubnetCount": {
      "type": "int",
      "defaultValue": 1,
      "maxValue": 1,
      "metadata": {
        "description": "The number of APIM subnets to provision"
      }
    },
    "frontendSubnetCount": {
      "type": "int",
      "defaultValue": 1,
      "maxValue": 5,
      "metadata": {
        "description": "The number of shared frontend app subnets to provision."
      }
    },
    "backendSubnetCount": {
      "type": "int",
      "defaultValue": 1,
      "maxValue": 5,
      "metadata": {
        "description": "The number of shared backend app subnets to provision."
      }
    },
    "apimEndpointSubnetCount": {
      "type": "int",
      "defaultValue": 1,
      "maxValue": 5,
      "metadata": {
        "description": "The number of shared APIM endpoint app subnets to provision."
      }
    },
    "firewallsNsgName": {
      "type": "string",
      "defaultValue": "Disabled",
      "metadata": {
        "description": "Name of the firewall NSG to be associated to the gateway subnet gw-sn-0"
      }
    },
    "frontEndAppServicePlanSku": {
      "type": "object",
      "defaultValue": {
        "tier": "Standard",
        "size": "2",
        "instances": 2
      },
      "metadata": {
        "description": "An object representing the sku of the app service plan."
      }
    },
    "backEndAppServicePlanSku": {
      "type": "object",
      "defaultValue": {
        "tier": "Standard",
        "size": "2",
        "instances": 2
      },
      "metadata": {
        "description": "An object representing the sku of the app service plan."
      }
    },
    "sharedStorageAccountContainerArray": {
      "type": "array",
      "metadata": {
        "description": "An array of the blob container names to deploy to the shared storage account."
      }
    },
    "logAnalyticsWorkspaceName": {
      "type": "string",
      "metadata": {
        "description": "The name of the Log Analytics workspace for the subscription."
      }
    },
    "customDomainHostedZone": {
      "type": "string",
      "metadata": {
        "description": "The Hosted Zone used for the APIM DNS records."
      }
    },
    "apimInitialDeploy": {
      "type": "string",
      "metadata": {
        "description": "A string for the initial APIM deployment which requires system managed identity creation before then deploying custom hostname configuration."
      }
    },
    "apimSKU": {
      "type": "string",
      "allowedValues": [
        "Developer",
        "Premium"
      ],
      "defaultValue": "Developer",
      "metadata": {
        "description": "The pricing tier of the API Management service."
      }
    },
    "apimLogsRetentionDays": {
      "type": "int",
      "defaultValue": 30,
      "metadata": {
        "description": "Number of days to retain the APIM logs within the Log Analytics Workspace."
      }
    },
    "apimPublisherEmail": {
      "type": "string",
      "metadata": {
        "description": "The publisher email of the APIM instance."
      }
    },
    "apimPublisherName": {
      "type": "string",
      "metadata": {
        "description": "The publisher name of the APIM instance."
      }
    },
    "apimPortalKeyVaultCertificateName": {
      "type": "string",
      "metadata": {
        "description": "The Key vault certificate name for the Developer Portal custom domain of the APIM instance."
      }
    },
    "apimGatewayKeyVaultCertificateName": {
      "type": "string",
      "metadata": {
        "description": "The Key vault certificate for the Gateway custom domain of the APIM instance."
      }
    },
    "apimManagementKeyVaultCertificateName": {
      "type": "string",
      "metadata": {
        "description": "The Key vault certificate for the Management custom domain of the APIM instance."
      }
    },
    "tenantPrimaryDomain": {
      "type": "string",
      "metadata": {
        "description": "The primary domain of the tenant."
      }
    },
    "apimAppRegistrationClientIds": {
      "type": "object",
      "metadata": {
        "description": "An object with keys of EnvironmentName and values of the client ID of the app registration used for the AAD identity provider of the APIM instance."
      }
    },
    "apimAppRegistrationClientSecret": {
      "type": "securestring",
      "metadata": {
        "description": "The client secret of the app registration used for the AAD identity provider of the APIM instance"
      }
    },
    "apimGroupsArray": {
      "type": "array",
      "metadata": {
        "description": "Array of Groups for the APIM instance."
      }
    },
    "apimProductsArray": {
      "type": "array",
      "metadata": {
        "description": "Array of Products for the APIM instance."
      }
    }
  },
  "variables": {
    "deploymentUrlBase": "https://raw.githubusercontent.com/SkillsFundingAgency/das-platform-building-blocks/master/templates/",
    "sharedDeploymentUrlBase": "https://raw.githubusercontent.com/SkillsFundingAgency/das-shared-infrastructure/master/",
    "environmentName": "[toLower(parameters('environmentName'))]",
    "resourceNamePrefix": "[toLower(concat('das-', variables('environmentName'),'-shared'))]",
    "sharedFrontEndAppServicePlanName": "[concat(variables('resourceNamePrefix'),'fe-asp')]",
    "sharedBackEndAppServicePlanName": "[concat(variables('resourceNamePrefix'),'be-asp')]",
    "sharedFrontEndAppGatewayPublicIpName": "[concat(variables('resourceNamePrefix'),'fe-ag-pip')]",
    "firewallsResourceGroup": "[toLower(concat('das-', variables('environmentName'),'-firewall-rg'))]",
    "apimResourceGroup": "[toLower(concat('das-', variables('environmentName'),'-apim-rg'))]",
    "apimName": "[concat(variables('resourceNamePrefix'),'-apim')]",
    "apimNetworkType": "External",
    "apimSubnetName": "apim-sn-0",
    "apimNsgName": "[concat(variables('resourceNamePrefix'),'-apim-nsg')]",
    "apimNsgRestrictToAppGateway": "[if(or(equals(parameters('environmentName'), 'DTA'), equals(parameters('environmentName'), 'AT')), bool('false'), bool('true'))]",
    "apimPortalKeyVaultCertificateNameValue": "[if(equals(parameters('apimPortalKeyVaultCertificateName'), 'Disabled'), '', parameters('apimPortalKeyVaultCertificateName'))]",
    "apimPortalHostameSuffix": "[concat('portal.', parameters('customDomainHostedZone'))]",
    "apimPortalHostName": "[if(equals(parameters('environmentName'), 'PRD'), variables('apimPortalHostameSuffix'), toLower(concat(parameters('environmentName'), '-', variables('apimPortalHostameSuffix'))))]",
    "apimGatewayKeyVaultCertificateNameValue": "[if(equals(parameters('apimGatewayKeyVaultCertificateName'), 'Disabled'), '', parameters('apimGatewayKeyVaultCertificateName'))]",
    "apimGatewayHostnameSuffix": "[concat('gateway.', parameters('customDomainHostedZone'))]",
    "apimGatewayHostName": "[if(equals(parameters('environmentName'), 'PRD'), variables('apimGatewayHostnameSuffix'), toLower(concat(parameters('environmentName'), '-', variables('apimGatewayHostnameSuffix'))))]",
    "apimManagementKeyVaultCertificateNameValue": "[if(equals(parameters('apimManagementKeyVaultCertificateName'), 'Disabled'), '', parameters('apimManagementKeyVaultCertificateName'))]",
    "apimManagementHostnameSuffix": "[concat('apim-management.', parameters('customDomainHostedZone'))]",
    "apimManagementHostName": "[if(equals(parameters('environmentName'), 'PRD'), variables('apimManagementHostnameSuffix'), toLower(concat(parameters('environmentName'), '-', variables('apimManagementHostnameSuffix'))))]",
    "apimInitialDeployBoolean": "[if(not(equals(parameters('apimInitialDeploy'), 'Disabled')), bool('true'), bool('false'))]",
    "apimDeployGroups": "[greater(length(parameters('apimGroupsArray')), 0)]",
    "apimDeployProducts": "[greater(length(parameters('apimProductsArray')), 0)]",
    "serviceBusNamespaceName": "[concat(variables('resourceNamePrefix'),'-ns')]",
    "redisCacheName": "[concat(variables('resourceNamePrefix'),'-rds')]",
    "cdnProfileName": "[concat(variables('resourceNamePrefix'),'-cdn')]",
    "eventHubNamespaceName": "[concat(variables('resourceNamePrefix'),'-eh')]",
    "configurationStorageName": "[concat(replace(variables('resourceNamePrefix'), '-',''), 'configstr')]",
    "sharedARMStorageName": "[concat(replace(variables('resourceNamePrefix'), '-',''), 'str')]",
    "sqlServerLocationMap": {
      "primary": {
        "location": "westeurope",
        "nameSuffix": "we"
      },
      "secondary": {
        "location": "northeurope",
        "nameSuffix": "ne"
      }
    },
    "baseSqlServerName": "[toLower(concat('das-',variables('environmentName'),'-shared-sql'))]",
    "deployFailoverGroups": "[contains(createArray('pp', 'prd') , toLower(variables('environmentName')))]",
    "primarySQLServerName": "[toLower(concat(variables('baseSQLServerName'), '-', variables('sqlServerLocationMap').primary.nameSuffix))]",
    "secondarySQLServerName": "[toLower(concat(variables('baseSQLServerName'), '-', variables('sqlServerLocationMap').secondary.nameSuffix))]",
    "virtualNetworkName": "[concat(variables('resourceNamePrefix'),'-vnet')]",
    "subnetServiceEndpointList": [
      "Microsoft.Web",
      "Microsoft.Sql",
      "Microsoft.Storage",
      "Microsoft.AzureCosmosDB"
    ]
  },
  "resources": [
    {
      "apiVersion": "2017-05-10",
      "name": "[concat('virtual-network-west-europe-', variables('environmentName'))]",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('sharedDeploymentUrlBase'),'templates/network.template.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "virtualNetworkName": {
            "value": "[variables('virtualNetworkName')]"
          },
          "virtualNetworkAddressSpacePrefix": {
            "value": "[parameters('virtualNetworkAddressSpacePrefix')]"
          },
          "virtualNetworkDeploy": {
            "value": "[parameters('virtualNetworkDeploy')]"
          },
          "serviceEndpointList": {
            "value": "[variables('subnetServiceEndpointList')]"
          },
          "gatewaySubnetCount": {
            "value": "[parameters('gatewaySubnetCount')]"
          },
          "managementSubnetCount": {
            "value": "[parameters('managementSubnetCount')]"
          },
          "apimSubnetCount": {
            "value": "[parameters('apimSubnetCount')]"
          },
          "frontendSubnetCount": {
            "value": "[parameters('frontendSubnetCount')]"
          },
          "backendSubnetCount": {
            "value": "[parameters('backendSubnetCount')]"
          },
          "apimEndpointSubnetCount": {
            "value": "[parameters('apimEndpointSubnetCount')]"
          },
          "firewallsNsgName": {
            "value": "[parameters('firewallsNsgName')]"
          },
          "firewallsResourceGroup": {
            "value": "[variables('firewallsResourceGroup')]"
          },
          "apimNsgName": {
            "value": "[variables('apimNsgName')]"
          },
          "apimResourceGroup": {
            "value": "[variables('apimResourceGroup')]"
          }
        }
      },
      "dependsOn": [
        "[variables('apimNsgName')]"
      ]
    },
    {
      "apiVersion": "2017-05-10",
      "name": "get-subnet-resourceid-list",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('sharedDeploymentUrlBase'),'utilities/getSubnetResourceIdList.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "virtualNetworkName": {
            "value": "[variables('virtualNetworkName')]"
          },
          "subnetConfiguration": {
            "value": "[reference(concat('virtual-network-west-europe-', variables('environmentName'))).outputs.backendSubnetConfiguration.value]"
          }
        }
      }
    },
    {
      "apiVersion": "2017-05-10",
      "name": "configuration-storage-account",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('deploymentUrlBase'),'storage-account-arm.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "storageAccountName": {
            "value": "[variables('configurationStorageName')]"
          }
        }
      }
    },
    {
      "apiVersion": "2017-05-10",
      "name": "arm-shared-storage",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('deploymentUrlBase'),'storage-account-arm.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "storageAccountName": {
            "value": "[variables('sharedARMStorageName')]"
          }
        }
      }
    },
    {
      "apiVersion": "2017-05-10",
      "name": "[concat('shared-storage-account-container', parameters('sharedStorageAccountContainerArray')[copyIndex()])]",
      "type": "Microsoft.Resources/deployments",
      "condition": "[greater(length(parameters('sharedStorageAccountContainerArray')), 0)]",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('deploymentUrlBase'), 'storage-container.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "storageAccountName": {
            "value": "[variables('sharedARMStorageName')]"
          },
          "containerName": {
            "value": "[parameters('sharedStorageAccountContainerArray')[copyIndex()]]"
          },
          "publicAccess": {
            "value": "None"
          }
        }
      },
      "copy": {
        "name": "sharedstorageaccountcontainercopy",
        "count": "[length(parameters('sharedStorageAccountContainerArray'))]"
      },
      "dependsOn": [
        "arm-shared-storage"
      ]
    },
    {
      "apiVersion": "2017-05-10",
      "name": "sql-server-deployment",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('deploymentUrlBase'),'sql-server.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "sqlServerName": {
            "value": "[if(variables('deployFailoverGroups'), variables('primarySQLServerName'), variables('baseSQLServerName'))]"
          },
          "sqlServerLocation": {
            "value": "[variables('sqlServerLocationMap').primary.location]"
          },
          "sqlServerAdminUserName": {
            "value": "[concat('d', uniqueString(resourceGroup().id, guid(if(variables('deployFailoverGroups'), variables('primarySQLServerName'), variables('baseSQLServerName')))))]"
          },
          "sqlServerAdminPassword": {
            "reference": {
              "keyVault": {
                "id": "[resourceId(parameters('sharedManagementResourceGroup'), 'Microsoft.KeyVault/vaults', parameters('sharedKeyVaultName'))]"
              },
              "secretName": "[parameters('sqlServerAdminPasswordSecretName')]"
            }
          },
          "sqlServerActiveDirectoryAdminLogin": {
            "value": "[parameters('sqlServerActiveDirectoryAdminLogin')]"
          },
          "sqlServerActiveDirectoryAdminObjectId": {
            "value": "[parameters('sqlServerActiveDirectoryAdminObjectId')]"
          },
          "threatDetectionEmailAddress": {
            "value": "[parameters('threatDetectionEmailAddress')]"
          },
          "sqlStorageAccountName": {
            "value": "[variables('sharedARMStorageName')]"
          }
        }
      },
      "dependsOn": [
        "arm-shared-storage"
      ]
    },
    {
      "apiVersion": "2017-05-10",
      "name": "sql-server-firewall-rule",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('deploymentUrlBase'),'sql-server-firewall-rules.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "serverName": {
            "value": "[if(variables('deployFailoverGroups'), variables('primarySQLServerName'), variables('baseSQLServerName'))]"
          },
          "subnetResourceIdList": {
            "value": "[reference('get-subnet-resourceid-list').outputs.subnetResourceIdList.value]"
          }
        }
      },
      "dependsOn": [
        "sql-server-deployment"
      ]
    },
    {
      "apiVersion": "2017-05-10",
      "name": "sql-server-deployment-replica",
      "type": "Microsoft.Resources/deployments",
      "condition": "[variables('deployFailoverGroups')]",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('deploymentUrlBase'),'sql-server.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "sqlServerName": {
            "value": "[if(variables('deployFailoverGroups'), variables('secondarySQLServerName'), variables('baseSQLServerName'))]"
          },
          "sqlServerLocation": {
            "value": "[variables('sqlServerLocationMap').secondary.location]"
          },
          "sqlServerAdminUserName": {
            "value": "[concat('d', uniqueString(resourceGroup().id, guid(variables('secondarySQLServerName'))))]"
          },
          "sqlServerAdminPassword": {
            "reference": {
              "keyVault": {
                "id": "[resourceId(parameters('sharedManagementResourceGroup'), 'Microsoft.KeyVault/vaults', parameters('sharedKeyVaultName'))]"
              },
              "secretName": "[parameters('sqlServerAdminPasswordSecretName')]"
            }
          },
          "sqlServerActiveDirectoryAdminLogin": {
            "value": "[parameters('sqlServerActiveDirectoryAdminLogin')]"
          },
          "sqlServerActiveDirectoryAdminObjectId": {
            "value": "[parameters('sqlServerActiveDirectoryAdminObjectId')]"
          },
          "threatDetectionEmailAddress": {
            "value": "[parameters('threatDetectionEmailAddress')]"
          },
          "sqlStorageAccountName": {
            "value": "[variables('sharedARMStorageName')]"
          }
        }
      },
      "dependsOn": [
        "arm-shared-storage"
      ]
    },
    {
      "apiVersion": "2017-05-10",
      "name": "sql-server-failover-group",
      "type": "Microsoft.Resources/deployments",
      "condition": "[variables('deployFailoverGroups')]",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('deploymentUrlBase'),'sql-server-failover-group.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "failoverGroupName": {
            "value": "[variables('baseSqlServerName')]"
          },
          "primarySqlServerName": {
            "value": "[variables('primarySQLServerName')]"
          },
          "secondarySqlServerName": {
            "value": "[variables('secondarySQLServerName')]"
          },
          "databases": {
            "value": "[parameters('databaseConfiguration')[toUpper(variables('environmentName'))].DatabaseResourceIds]"
          }
        }
      },
      "dependsOn": [
        "sql-server-deployment",
        "sql-server-deployment-replica"
      ]
    },
    {
      "apiVersion": "2017-05-10",
      "name": "front-end-app-service-plan",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('deploymentUrlBase'),'app-service-plan.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "appServicePlanName": {
            "value": "[variables('sharedFrontEndAppServicePlanName')]"
          },
          "aspSize": {
            "value": "[parameters('frontEndAppServicePlanSku').size]"
          },
          "aspInstances": {
            "value": "[parameters('frontEndAppServicePlanSku').instances]"
          },
          "nonASETier": {
            "value": "[parameters('frontEndAppServicePlanSku').tier]"
          }
        }
      }
    },
    {
      "apiVersion": "2017-05-10",
      "name": "back-end-app-service-plan",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('deploymentUrlBase'),'app-service-plan.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "appServicePlanName": {
            "value": "[variables('sharedBackEndAppServicePlanName')]"
          },
          "aspSize": {
            "value": "[parameters('backEndAppServicePlanSku').size]"
          },
          "aspInstances": {
            "value": "[parameters('backEndAppServicePlanSku').instances]"
          },
          "nonASETier": {
            "value": "[parameters('backEndAppServicePlanSku').tier]"
          }
        }
      }
    },
    {
      "apiVersion": "2017-05-10",
      "name": "service-bus",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('deploymentUrlBase'),'service-bus.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "serviceBusNamespaceName": {
            "value": "[variables('serviceBusNamespaceName')]"
          },
          "serviceBusQueues": {
            "value": [
              "deadletters"
            ]
          }
        }
      }
    },
    {
      "apiVersion": "2017-05-10",
      "name": "redis-cache",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('deploymentUrlBase'),'redis.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "redisCacheName": {
            "value": "[variables('redisCacheName')]"
          },
          "redisCacheSKU": {
            "value": "Standard"
          },
          "redisCacheFamily": {
            "value": "C"
          },
          "redisCacheCapacity": {
            "value": 1
          },
          "enableNonSslPort": {
            "value": false
          }
        }
      }
    },
    {
      "apiVersion": "2017-05-10",
      "name": "cdn-profile",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('deploymentUrlBase'),'cdn-profile.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "cdnProfileName": {
            "value": "[variables('cdnProfileName')]"
          },
          "cdnSKU": {
            "value": "Standard_Verizon"
          }
        }
      }
    },
    {
      "apiVersion": "2017-05-10",
      "name": "event-hub-namespace",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('deploymentUrlBase'),'event-hub-namespace.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "eventHubNamespaceName": {
            "value": "[variables('eventHubNamespaceName')]"
          },
          "eventHubTier": {
            "value": "Standard"
          },
          "eventHubCapacity": {
            "value": 1
          },
          "isAutoInflateEnabled": {
            "value": true
          },
          "maximumThroughputUnits": {
            "value": 20
          }
        }
      }
    },
    {
      "apiVersion": "2017-05-10",
      "name": "apim-service",
      "type": "Microsoft.Resources/deployments",
      "resourceGroup": "[variables('apimResourceGroup')]",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('deploymentUrlBase'),'apim/apim-service.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "apimName": {
            "value": "[variables('apimName')]"
          },
          "apimInitialDeploy": {
            "value": "[variables('apimInitialDeployBoolean')]"
          },
          "publisherEmail": {
            "value": "[parameters('apimPublisherEmail')]"
          },
          "publisherName": {
            "value": "[parameters('apimPublisherName')]"
          },
          "sku": {
            "value": "[parameters('apimSKU')]"
          },
          "virtualNetworkType": {
            "value": "[variables('apimNetworkType')]"
          },
          "virtualNetworkResourceGroup": {
            "value": "[resourceGroup().name]"
          },
          "virtualNetworkName": {
            "value": "[variables('virtualNetworkName')]"
          },
          "subnetName": {
            "value": "[variables('apimSubnetName')]"
          },
          "keyVaultResourceGroup": {
            "value": "[parameters('sharedManagementResourceGroup')]"
          },
          "keyVaultName": {
            "value": "[parameters('sharedKeyVaultName')]"
          },
          "portalHostname": {
            "value": "[variables('apimPortalHostName')]"
          },
          "portalKeyVaultCertificateName": {
            "value": "[variables('apimPortalKeyVaultCertificateNameValue')]"
          },
          "gatewayHostname": {
            "value": "[variables('apimGatewayHostName')]"
          },
          "gatewayKeyVaultCertificateName": {
            "value": "[variables('apimGatewayKeyVaultCertificateNameValue')]"
          },
          "managementHostname": {
            "value": "[variables('apimManagementHostName')]"
          },
          "managementKeyVaultCertificateName": {
            "value": "[variables('apimManagementKeyVaultCertificateNameValue')]"
          },
          "tenantPrimaryDomain": {
            "value": "[parameters('tenantPrimaryDomain')]"
          },
          "apimAppRegistrationClientId": {
            "value": "[parameters('apimAppRegistrationClientIds')[parameters('environmentName')]]"
          },
          "apimAppRegistrationClientSecret": {
            "value": "[parameters('apimAppRegistrationClientSecret')]"
          }
        }
      },
      "dependsOn": [
        "[concat('virtual-network-west-europe-', variables('environmentName'))]"
      ]
    },
    {
      "apiVersion": "2017-05-10",
      "type": "Microsoft.Resources/deployments",
      "name": "[variables('apimNsgName')]",
      "resourceGroup": "[variables('apimResourceGroup')]",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('deploymentUrlBase'),'nsg.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "nsgName": {
            "value": "[variables('apimNsgName')]"
          },
          "securityRules": {
            "value": [
              {
                "name": "AllowFrontendAppGateway",
                "properties": {
                  "description": "Allow Frontend App Gateway Inbound traffic",
                  "protocol": "TCP",
                  "sourcePortRange": "*",
                  "destinationPortRange": "443",
                  "sourceAddressPrefix": "[if(variables('apimNsgRestrictToAppGateway'), reference(resourceId(variables('firewallsResourceGroup'), 'Microsoft.Network/publicIPAddresses', variables('sharedFrontEndAppGatewayPublicIpName')), '2019-09-01').ipAddress, 'Internet')]",
                  "destinationAddressPrefix": "VirtualNetwork",
                  "access": "Allow",
                  "priority": 100,
                  "direction": "Inbound"
                }
              },
              {
                "name": "AllowApiManagementEndpoint",
                "properties": {
                  "description": "Allow Azure communication for Api Management endpoint for Azure portal and PowerShell",
                  "protocol": "TCP",
                  "sourcePortRange": "*",
                  "destinationPortRange": "3443",
                  "sourceAddressPrefix": "ApiManagement",
                  "destinationAddressPrefix": "VirtualNetwork",
                  "access": "Allow",
                  "priority": 110,
                  "direction": "Inbound"
                }
              },
              {
                "name": "AllowAccessToRedisServiceInbound",
                "properties": {
                  "description": "Allow Access to Redis Service for Rate Limit policies between machines",
                  "protocol": "TCP",
                  "sourcePortRange": "*",
                  "destinationPortRange": "6381-6383",
                  "sourceAddressPrefix": "VirtualNetwork",
                  "destinationAddressPrefix": "VirtualNetwork",
                  "access": "Allow",
                  "priority": 120,
                  "direction": "Inbound"
                }
              },
              {
                "name": "AllowAzureLoadBalancer",
                "properties": {
                  "description": "Allow Azure Infrastructure Load Balancer",
                  "protocol": "TCP",
                  "sourcePortRange": "*",
                  "destinationPortRange": "*",
                  "sourceAddressPrefix": "AzureLoadBalancer",
                  "destinationAddressPrefix": "VirtualNetwork",
                  "access": "Allow",
                  "priority": 130,
                  "direction": "Inbound"
                }
              },
              {
                "name": "DenyAll",
                "properties": {
                  "description": "Deny all inbound traffic",
                  "protocol": "*",
                  "sourcePortRange": "*",
                  "destinationPortRange": "*",
                  "sourceAddressPrefix": "*",
                  "destinationAddressPrefix": "*",
                  "access": "Deny",
                  "priority": 140,
                  "direction": "Inbound"
                }
              }
            ]
          }
        }
      },
      "dependsOn": []
    },
    {
      "apiVersion": "2017-05-10",
      "name": "apim-logger-app-insights",
      "type": "Microsoft.Resources/deployments",
      "resourceGroup": "[variables('apimResourceGroup')]",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('deploymentUrlBase'),'application-insights.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "appInsightsName": {
            "value": "[variables('apimName')]"
          }
        }
      },
      "dependsOn": []
    },
    {
      "apiVersion": "2017-05-10",
      "name": "apim-logger",
      "type": "Microsoft.Resources/deployments",
      "resourceGroup": "[variables('apimResourceGroup')]",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('deploymentUrlBase'),'apim/apim-logger.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "apimName": {
            "value": "[variables('apimName')]"
          },
          "loggerName": {
            "value": "appInsightsLogger"
          },
          "loggerType": {
            "value": "applicationInsights"
          },
          "loggerCredentials": {
            "value": {
              "instrumentationKey": "[reference('apim-logger-app-insights').outputs.InstrumentationKey.value]"
            }
          },
          "loggerResourceId": {
            "value": "[resourceId('Microsoft.Insights/components', variables('apimName'))]"
          }
        }
      },
      "dependsOn": [
        "apim-service"
      ]
    },
    {
      "apiVersion": "2017-05-10",
      "name": "apim-diagnostic-settings",
      "type": "Microsoft.Resources/deployments",
      "resourceGroup": "[variables('apimResourceGroup')]",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('deploymentUrlBase'),'apim/apim-diagnostic-settings.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "apimName": {
            "value": "[variables('apimName')]"
          },
          "logAnalyticsWorkspaceResourceGroup": {
            "value": "[parameters('sharedManagementResourceGroup')]"
          },
          "logAnalyticsWorkspaceName": {
            "value": "[parameters('logAnalyticsWorkspaceName')]"
          },
          "logsRetentionDays": {
            "value": "[parameters('apimLogsRetentionDays')]"
          }
        }
      },
      "dependsOn": [
        "apim-service"
      ]
    },
    {
      "apiVersion": "2017-05-10",
      "name": "[concat('apim-group-', if(variables('apimDeployGroups'), copyIndex(), 'placeholder'))]",
      "type": "Microsoft.Resources/deployments",
      "condition": "[variables('apimDeployGroups')]",
      "resourceGroup": "[variables('apimResourceGroup')]",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('deploymentUrlBase'),'apim/apim-group.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "apimName": {
            "value": "[variables('apimName')]"
          },
          "tenantPrimaryDomain": {
            "value": "[parameters('tenantPrimaryDomain')]"
          },
          "aadGroupObjectId": {
            "value": "[parameters('apimGroupsArray')[copyIndex()].aadGroupObjectId]"
          },
          "groupDisplayName": {
            "value": "[parameters('apimGroupsArray')[copyIndex()].groupDisplayName]"
          },
          "groupDescription": {
            "value": "[parameters('apimGroupsArray')[copyIndex()].groupDescription]"
          }
        }
      },
      "copy": {
        "name": "apim-groups-copy",
        "count": "[if(variables('apimDeployGroups'), length(parameters('apimGroupsArray')), 1)]"
      },
      "dependsOn": [
        "apim-service"
      ]
    },
    {
      "apiVersion": "2017-05-10",
      "name": "[concat('apim-product-', if(variables('apimDeployProducts'), parameters('apimProductsArray')[copyIndex()].productResourceName, 'placeholder'))]",
      "type": "Microsoft.Resources/deployments",
      "condition": "[variables('apimDeployProducts')]",
      "resourceGroup": "[variables('apimResourceGroup')]",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('deploymentUrlBase'),'apim/apim-product.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "apimName": {
            "value": "[variables('apimName')]"
          },
          "productResourceName": {
            "value": "[parameters('apimProductsArray')[copyIndex()].productResourceName]"
          },
          "productDisplayName": {
            "value": "[parameters('apimProductsArray')[copyIndex()].productDisplayName]"
          },
          "productDescription": {
            "value": "[parameters('apimProductsArray')[copyIndex()].productDescription]"
          },
          "productSubscriptionRequired": {
            "value": true
          },
          "productApprovalRequired": {
            "value": true
          },
          "productState": {
            "value": "[parameters('apimProductsArray')[copyIndex()].productState]"
          },
          "productGroups": {
            "value": "[parameters('apimProductsArray')[copyIndex()].productGroups]"
          }
        }
      },
      "copy": {
        "name": "apim-products-copy",
        "count": "[if(variables('apimDeployProducts'), length(parameters('apimProductsArray')), 1)]"
      },
      "dependsOn": [
        "apim-service",
        "apim-groups-copy"
      ]
    }
  ],
  "outputs": {}
}

{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "environmentName": {
      "type": "string",
      "metadata": {
        "description": "Abbreviated name for the environment, eg: AT, TEST, PP, PRD"
      }
    },
    "sharedRedisCacheSKU": {
      "type": "string",
      "defaultValue": "Standard",
      "metadata": {
        "description": "The type of Redis cache to deploy"
      }
    },
    "sharedRedisCacheFamily": {
      "type": "string",
      "defaultValue": "C",
      "metadata": {
        "description": "The SKU family to use"
      }
    },
    "sharedRedisCacheCapacity": {
      "type": "int",
      "defaultValue": 1,
      "metadata": {
        "description": "The size of the Redis cache to deploy"
      }
    },
    "sharedManagementResourceGroup": {
      "type": "string",
      "metadata": {
        "description": "Name of the shared management resource group"
      }
    },
    "sharedKeyVaultName": {
      "type": "string",
      "metadata": {
        "description": "Name of the shared Key Vault for storing the SQL password"
      }
    },
    "sharedKeyVaultId": {
      "type": "string",
      "metadata": {
        "description": "This is necessary because the 'dependsOn' in the subscription template is not waiting for the keyvault to deploy"
      }
    },
    "sqlServerAdminPasswordSecretName": {
      "type": "string",
      "metadata": {
        "description": "The name of the Key Vault secret which contains the SQL Admin password for this environment"
      }
    },
    "sqlServerActiveDirectoryAdminLogin": {
      "type": "string",
      "metadata": {
        "description": "The active directory admin that will be assigned to the sql server"
      }
    },
    "sqlServerActiveDirectoryAdminObjectId": {
      "type": "string",
      "metadata": {
        "description": "The object id of the active directory admin that will be assigned to the sql server"
      }
    },
    "threatDetectionEmailAddress": {
      "type": "string",
      "metadata": {
        "description": "The email address that threat alerts will be sent to"
      }
    },
    "databaseConfiguration": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Configuration object which describes the structure of failovergroups"
      }
    },
    "virtualNetworkAddressSpacePrefix": {
      "type": "string",
      "metadata": {
        "description": "Virtual network address prefix for the environment vnet"
      }
    },
    "virtualNetworkDeploy": {
      "type": "string",
      "metadata": {
        "description": "Deploys the Virtual Network and deletes all subnets if Enabled https://github.com/Azure/azure-quickstart-templates/issues/2786"
      }
    },
    "gatewaySubnetCount": {
      "type": "int",
      "defaultValue": 1,
      "minValue": 0,
      "maxValue": 1,
      "metadata": {
        "description": "The number of gateway subnets to provision"
      }
    },
    "managementSubnetCount": {
      "type": "int",
      "defaultValue": 1,
      "minValue": 0,
      "maxValue": 1,
      "metadata": {
        "description": "The number of management subnets to provision"
      }
    },
    "frontendSubnetCount": {
      "type": "int",
      "defaultValue": 1,
      "minValue": 0,
      "maxValue": 5,
      "metadata": {
        "description": "The number of shared frontend app subnets to provision."
      }
    },
    "backendSubnetCount": {
      "type": "int",
      "defaultValue": 1,
      "minValue": 0,
      "maxValue": 5,
      "metadata": {
        "description": "The number of shared backend app subnets to provision."
      }
    },
    "sharedWorkerSubnetCount": {
      "type": "int",
      "defaultValue": 1,
      "minValue": 0,
      "maxValue": 5,
      "metadata": {
        "description": "The number of shared worker app subnets to provision."
      }
    },
    "sharedAiSearchSubnetCount": {
      "type": "int",
      "defaultValue": 1,
      "minValue": 0,
      "maxValue": 1,
      "metadata": {
        "description": "Whether to deploy the shared AI search subnet."
      }
    },
    "sharedRedisSubnetCount": {
      "type": "int",
      "defaultValue": 1,
      "minValue": 0,
      "maxValue": 1,
      "metadata": {
        "description": "Whether to deploy the shared redis subnet."
      }
    },
    "loggingRedisSubnetCount": {
      "type": "int",
      "defaultValue": 1,
      "minValue": 0,
      "maxValue": 1,
      "metadata": {
        "description": "Whether to deploy the shared redis subnet."
      }
    },
    "amplsSubnetCount": {
      "type": "int",
      "defaultValue": 1,
      "minValue": 0,
      "maxValue": 1,
      "metadata": {
        "description": "Whether to deploy the shared redis subnet."
      }
    },
    "firewallsNsgName": {
      "type": "string",
      "defaultValue": "Disabled",
      "metadata": {
        "description": "Name of the firewall NSG to be associated to the gateway subnet gw-sn-0"
      }
    },
    "frontEndAppServicePlanSku": {
      "type": "object",
      "defaultValue": {
        "tier": "Standard",
        "size": "2",
        "instances": 2
      },
      "metadata": {
        "description": "An object representing the sku of the app service plan."
      }
    },
    "backEndAppServicePlanSku": {
      "type": "object",
      "defaultValue": {
        "tier": "Standard",
        "size": "2",
        "instances": 2
      },
      "metadata": {
        "description": "An object representing the sku of the app service plan."
      }
    },
    "backendAppServicePlanSkus": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Takes an array of objects: '[{\"identifier\": 0,\"tier\": \"Basic\",\"size\": \"1\",\"instances\": 1}]. Removing the backslash. The identifier helps map the values to the deployed ASP."
      }
    },
    "frontendAppServicePlanSkus": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Takes an array of objects: '[{\"identifier\": 0,\"tier\": \"Basic\",\"size\": \"1\",\"instances\": 1}]. Removing the backslash. The identifier helps map the values to the deployed ASP."
      }
    },
    "sharedWorkerAppServicePlanSku": {
      "type": "object",
      "defaultValue": {
        "tier": "Standard",
        "size": "1",
        "instances": 1
      },
      "metadata": {
        "description": "An object representing the sku of the app service plan."
      }
    },
    "sharedStorageAccountContainerArray": {
      "type": "array",
      "metadata": {
        "description": "An array of the blob container names to deploy to the shared storage account."
      }
    },
    "logAnalyticsWorkspaceName": {
      "type": "string"
    },
    "logAnalyticsWorkspaceResourceGroupName": {
      "type": "string"
    },
    "aiSearchSku": {
      "type": "string",
      "defaultValue": "basic",
      "metadata": {
        "description": "The pricing tier of the search service you want to create (for example, basic or standard)."
      }
    },
    "aiSearchReplicaCount": {
      "type": "int",
      "defaultValue": 1,
      "metadata": {
        "description": "Replicas distribute search workloads across the service. You need 2 or more to support high availability (applies to Basic and Standard only)."
      }
    },
    "aiSearchPartitionCount": {
      "type": "int",
      "defaultValue": 1,
      "metadata": {
        "description": "Partitions allow for scaling of document count as well as faster indexing by sharding your index over multiple Azure Search units."
      }
    },
    "amplsQueryAccessMode": {
      "type": "string",
      "defaultValue": "Open",
      "allowedValues": [
        "PrivateOnly",
        "Open"
      ],
      "metadata": {
        "description": "The pricing tier of the search service you want to create (for example, basic or standard)."
      }
    },
    "amplsIngestionAccessMode": {
      "type": "string",
      "defaultValue": "Open",
      "allowedValues": [
        "PrivateOnly",
        "Open"
      ],
      "metadata": {
        "description": "The pricing tier of the search service you want to create (for example, basic or standard)."
      }
    },
    "routeTableRoutes": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "The route objects for the route table"
      }
    },
    "disableBgpRoutePropagation": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Indicates whether BGP route propagation is disabled"
      }
    },
    "utcValue": {
      "type": "string",
      "defaultValue": "[utcNow()]"
    },
    "products": {
      "type": "array"
    }
  },
  "variables": {
    "deploymentUrlBase": "https://raw.githubusercontent.com/SkillsFundingAgency/das-platform-building-blocks/master/templates/",
    "sharedDeploymentUrlBase": "https://raw.githubusercontent.com/SkillsFundingAgency/das-shared-infrastructure/master/",
    "environmentName": "[toLower(parameters('environmentName'))]",
    "resourceNamePrefix": "[toLower(concat('das-', variables('environmentName'),'-shared'))]",
    "resourceGroupName": "[resourceGroup().name]",
    "routeTableName": "[toLower(concat('das-', variables('environmentName'),'-shared-rt'))]",
    "sharedFrontEndAppServicePlanName": "[concat(variables('resourceNamePrefix'),'fe-asp')]",
    "sharedBackEndAppServicePlanName": "[concat(variables('resourceNamePrefix'),'be-asp')]",
    "backEndAppServicePlanNamePrefix": "[concat(variables('resourceNamePrefix'), 'be-asp-')]",
    "frontEndAppServicePlanNamePrefix": "[concat(variables('resourceNamePrefix'), 'fe-asp-')]",
    "sharedWorkerAppServicePlanName": "[concat(variables('resourceNamePrefix'),'wkr-asp')]",
    "firewallsResourceGroup": "[toLower(concat('das-', variables('environmentName'),'-firewall-rg'))]",
    "serviceBusNamespaceName": "[concat(variables('resourceNamePrefix'),'-ns')]",
    "sharedRedisCacheName": "[concat(variables('resourceNamePrefix'),'-rds')]",
    "sharedRedisPrivateEndpointName": "[concat(variables('sharedRedisCacheName'),'-pe')]",
    "cdnProfileName": "[concat(variables('resourceNamePrefix'),'-cdn')]",
    "eventHubNamespaceName": "[concat(variables('resourceNamePrefix'),'-eh')]",
    "aiSearchName": "[concat(variables('resourceNamePrefix'),'-srch')]",
    "aiSearchPrivateEndpointName": "[concat(variables('aiSearchName'),'-pe')]",
    "aiSearchPrivateDnsZoneName": "privatelink.search.windows.net",
    "redisPrivateDnsZoneName": "privatelink.redis.cache.windows.net",
    "redisPrivateDnsZoneId": "[resourceId(variables('resourceGroupName'),'Microsoft.Network/privateDnsZones',variables('redisPrivateDnsZoneName'))]",
    "configurationStorageName": "[concat(replace(variables('resourceNamePrefix'), '-',''), 'configstr')]",
    "sharedARMStorageName": "[concat(replace(variables('resourceNamePrefix'), '-',''), 'str')]",
    "sqlServerLocationMap": {
      "primary": {
        "location": "westeurope",
        "nameSuffix": "we"
      },
      "secondary": {
        "location": "northeurope",
        "nameSuffix": "ne"
      }
    },
    "sqlServerMinimalTlsVersion": "1.2",
    "baseSqlServerName": "[toLower(concat('das-',variables('environmentName'),'-shared-sql'))]",
    "deployFailoverGroups": "[contains(createArray('pp', 'prd') , toLower(variables('environmentName')))]",
    "primarySQLServerName": "[toLower(concat(variables('baseSQLServerName'), '-', variables('sqlServerLocationMap').primary.nameSuffix))]",
    "secondarySQLServerName": "[toLower(concat(variables('baseSQLServerName'), '-', variables('sqlServerLocationMap').secondary.nameSuffix))]",
    "virtualNetworkName": "[concat(variables('resourceNamePrefix'),'-vnet')]",
    "virtualNetworkDeploymentName": "[concat('virtual-network-west-europe-', variables('environmentName'))]",
    "subnetServiceEndpointList": [
      "Microsoft.Web",
      "Microsoft.Sql",
      "Microsoft.Storage",
      "Microsoft.AzureCosmosDB",
      "Microsoft.KeyVault"
    ],
    "amplsName": "[concat(variables('resourceNamePrefix'), '-ampls')]",
    "amplsPrivateEndpointName": "[concat(variables('amplsName'),'-pe')]",
    "amplsPrivateDnsZones": [ "privatelink.monitor.azure.com", "privatelink.oms.opinsights.azure.com", "privatelink.ods.opinsights.azure.com", "privatelink.agentsvc.azure-automation.net", "privatelink.blob.core.windows.net" ]
  },
  "resources": [
    {
      "apiVersion": "2022-09-01",
      "name": "[variables('virtualNetworkDeploymentName')]",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[uri(variables('sharedDeploymentUrlBase'),'templates/network.template.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "virtualNetworkName": {
            "value": "[variables('virtualNetworkName')]"
          },
          "virtualNetworkAddressSpacePrefix": {
            "value": "[parameters('virtualNetworkAddressSpacePrefix')]"
          },
          "virtualNetworkDeploy": {
            "value": "[parameters('virtualNetworkDeploy')]"
          },
          "serviceEndpointList": {
            "value": "[variables('subnetServiceEndpointList')]"
          },
          "gatewaySubnetCount": {
            "value": "[parameters('gatewaySubnetCount')]"
          },
          "managementSubnetCount": {
            "value": "[parameters('managementSubnetCount')]"
          },
          "frontendSubnetCount": {
            "value": "[parameters('frontendSubnetCount')]"
          },
          "backendSubnetCount": {
            "value": "[parameters('backendSubnetCount')]"
          },
          "sharedWorkerSubnetCount": {
            "value": "[parameters('sharedWorkerSubnetCount')]"
          },
          "sharedAiSearchSubnetCount": {
            "value": "[parameters('sharedAiSearchSubnetCount')]"
          },
          "sharedRedisSubnetCount": {
            "value": "[parameters('sharedRedisSubnetCount')]"
          },
          "loggingRedisSubnetCount": {
            "value": "[parameters('loggingRedisSubnetCount')]"
          },
          "amplsSubnetCount": {
            "value": "[parameters('amplsSubnetCount')]"
          },
          "firewallsNsgName": {
            "value": "[parameters('firewallsNsgName')]"
          },
          "firewallsResourceGroup": {
            "value": "[variables('firewallsResourceGroup')]"
          }
        }
      }
    },
    {
      "apiVersion": "2022-09-01",
      "name": "get-subnet-resourceid-list",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[uri(variables('sharedDeploymentUrlBase'),'utilities/getSubnetResourceIdList.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "virtualNetworkName": {
            "value": "[variables('virtualNetworkName')]"
          },
          "subnetConfiguration": {
            "value": "[concat(reference(variables('virtualNetworkDeploymentName')).outputs.backendSubnetConfiguration.value, reference(variables('virtualNetworkDeploymentName')).outputs.frontendSubnetConfiguration.value)]"
          }
        }
      }
    },
    {
      "apiVersion": "2022-09-01",
      "name": "configuration-storage-account",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[uri(variables('deploymentUrlBase'),'storage-account-arm.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "storageAccountName": {
            "value": "[variables('configurationStorageName')]"
          },
          "allowSharedKeyAccess": {
            "value": true
          }
        }
      }
    },
    {
      "apiVersion": "2022-09-01",
      "name": "arm-shared-storage",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[uri(variables('deploymentUrlBase'),'storage-account-arm.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "storageAccountName": {
            "value": "[variables('sharedARMStorageName')]"
          },
          "allowSharedKeyAccess": {
            "value": true
          }
        }
      }
    },
    {
      "apiVersion": "2022-09-01",
      "name": "[concat('shared-storage-account-container', parameters('sharedStorageAccountContainerArray')[copyIndex()])]",
      "type": "Microsoft.Resources/deployments",
      "condition": "[greater(length(parameters('sharedStorageAccountContainerArray')), 0)]",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[uri(variables('deploymentUrlBase'), 'storage-container.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "storageAccountName": {
            "value": "[variables('sharedARMStorageName')]"
          },
          "containerName": {
            "value": "[parameters('sharedStorageAccountContainerArray')[copyIndex()]]"
          },
          "publicAccess": {
            "value": "None"
          }
        }
      },
      "copy": {
        "name": "sharedstorageaccountcontainercopy",
        "count": "[length(parameters('sharedStorageAccountContainerArray'))]"
      },
      "dependsOn": [
        "arm-shared-storage"
      ]
    },
    {
      "apiVersion": "2022-09-01",
      "name": "sql-server-deployment",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[uri(variables('deploymentUrlBase'),'sql-server.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "sqlServerName": {
            "value": "[if(variables('deployFailoverGroups'), variables('primarySQLServerName'), variables('baseSQLServerName'))]"
          },
          "sqlServerLocation": {
            "value": "[variables('sqlServerLocationMap').primary.location]"
          },
          "sqlServerAdminUserName": {
            "value": "[concat('d', uniqueString(resourceGroup().id, guid(if(variables('deployFailoverGroups'), variables('primarySQLServerName'), variables('baseSQLServerName')))))]"
          },
          "sqlServerAdminPassword": {
            "reference": {
              "keyVault": {
                "id": "[resourceId(parameters('sharedManagementResourceGroup'), 'Microsoft.KeyVault/vaults', parameters('sharedKeyVaultName'))]"
              },
              "secretName": "[parameters('sqlServerAdminPasswordSecretName')]"
            }
          },
          "sqlServerActiveDirectoryAdminLogin": {
            "value": "[parameters('sqlServerActiveDirectoryAdminLogin')]"
          },
          "sqlServerActiveDirectoryAdminObjectId": {
            "value": "[parameters('sqlServerActiveDirectoryAdminObjectId')]"
          },
          "sqlServerMinimalTlsVersion": {
            "value": "[variables('sqlServerMinimalTlsVersion')]"
          },
          "threatDetectionEmailAddress": {
            "value": "[parameters('threatDetectionEmailAddress')]"
          },
          "sqlStorageAccountName": {
            "value": "[variables('sharedARMStorageName')]"
          }
        }
      },
      "dependsOn": [
        "arm-shared-storage"
      ]
    },
    {
      "apiVersion": "2022-09-01",
      "name": "sql-server-firewall-rule",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[uri(variables('deploymentUrlBase'),'sql-server-firewall-rules.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "serverName": {
            "value": "[if(variables('deployFailoverGroups'), variables('primarySQLServerName'), variables('baseSQLServerName'))]"
          },
          "subnetResourceIdList": {
            "value": "[reference('get-subnet-resourceid-list').outputs.subnetResourceIdList.value]"
          }
        }
      },
      "dependsOn": [
        "sql-server-deployment"
      ]
    },
    {
      "apiVersion": "2022-09-01",
      "name": "sql-server-deployment-replica",
      "type": "Microsoft.Resources/deployments",
      "condition": "[variables('deployFailoverGroups')]",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[uri(variables('deploymentUrlBase'),'sql-server.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "sqlServerName": {
            "value": "[if(variables('deployFailoverGroups'), variables('secondarySQLServerName'), variables('baseSQLServerName'))]"
          },
          "sqlServerLocation": {
            "value": "[variables('sqlServerLocationMap').secondary.location]"
          },
          "sqlServerAdminUserName": {
            "value": "[concat('d', uniqueString(resourceGroup().id, guid(variables('secondarySQLServerName'))))]"
          },
          "sqlServerAdminPassword": {
            "reference": {
              "keyVault": {
                "id": "[resourceId(parameters('sharedManagementResourceGroup'), 'Microsoft.KeyVault/vaults', parameters('sharedKeyVaultName'))]"
              },
              "secretName": "[parameters('sqlServerAdminPasswordSecretName')]"
            }
          },
          "sqlServerActiveDirectoryAdminLogin": {
            "value": "[parameters('sqlServerActiveDirectoryAdminLogin')]"
          },
          "sqlServerActiveDirectoryAdminObjectId": {
            "value": "[parameters('sqlServerActiveDirectoryAdminObjectId')]"
          },
          "sqlServerMinimalTlsVersion": {
            "value": "[variables('sqlServerMinimalTlsVersion')]"
          },
          "threatDetectionEmailAddress": {
            "value": "[parameters('threatDetectionEmailAddress')]"
          },
          "sqlStorageAccountName": {
            "value": "[variables('sharedARMStorageName')]"
          }
        }
      },
      "dependsOn": [
        "arm-shared-storage"
      ]
    },
    {
      "apiVersion": "2022-09-01",
      "name": "sql-server-failover-group",
      "type": "Microsoft.Resources/deployments",
      "condition": "[variables('deployFailoverGroups')]",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[uri(variables('deploymentUrlBase'),'sql-server-failover-group.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "failoverGroupName": {
            "value": "[variables('baseSqlServerName')]"
          },
          "primarySqlServerName": {
            "value": "[variables('primarySQLServerName')]"
          },
          "secondarySqlServerName": {
            "value": "[variables('secondarySQLServerName')]"
          },
          "databases": {
            "value": "[parameters('databaseConfiguration')[toUpper(variables('environmentName'))].DatabaseResourceIds]"
          }
        }
      },
      "dependsOn": [
        "sql-server-deployment",
        "sql-server-deployment-replica"
      ]
    },
    {
      "apiVersion": "2022-09-01",
      "name": "front-end-app-service-plan",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[uri(variables('deploymentUrlBase'),'app-service-plan.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "appServicePlanName": {
            "value": "[variables('sharedFrontEndAppServicePlanName')]"
          },
          "aspSize": {
            "value": "[parameters('frontEndAppServicePlanSku').size]"
          },
          "aspInstances": {
            "value": "[parameters('frontEndAppServicePlanSku').instances]"
          },
          "nonASETier": {
            "value": "[parameters('frontEndAppServicePlanSku').tier]"
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[concat('front-end-app-service-plan-', copyIndex(), '-', parameters('utcValue'))]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "copy": {
        "name": "frontendAppServicePlanLoop",
        "count": "[length(parameters('frontendAppServicePlanSkus'))]"
      },
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[uri(variables('deploymentUrlBase'),'app-service-plan.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "appServicePlanName": {
            "value": "[concat(variables('frontEndAppServicePlanNamePrefix'), copyIndex())]"
          },
          "aspSize": {
            "value": "[parameters('frontendAppServicePlanSkus')[copyIndex()].size]"
          },
          "aspInstances": {
            "value": "[parameters('frontendAppServicePlanSkus')[copyIndex()].instances]"
          },
          "nonASETier": {
            "value": "[parameters('frontendAppServicePlanSkus')[copyIndex()].tier]"
          }
        }
      }
    },
    {
      "apiVersion": "2022-09-01",
      "name": "back-end-app-service-plan",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[uri(variables('deploymentUrlBase'),'app-service-plan.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "appServicePlanName": {
            "value": "[variables('sharedBackEndAppServicePlanName')]"
          },
          "aspSize": {
            "value": "[parameters('backEndAppServicePlanSku').size]"
          },
          "aspInstances": {
            "value": "[parameters('backEndAppServicePlanSku').instances]"
          },
          "nonASETier": {
            "value": "[parameters('backEndAppServicePlanSku').tier]"
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[concat('back-end-app-service-plan-', copyIndex(), '-', parameters('utcValue'))]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "copy": {
        "name": "backendAppServicePlanLoop",
        "count": "[length(parameters('backendAppServicePlanSkus'))]"
      },
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[uri(variables('deploymentUrlBase'),'app-service-plan.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "appServicePlanName": {
            "value": "[concat(variables('backEndAppServicePlanNamePrefix'), copyIndex())]"
          },
          "aspSize": {
            "value": "[parameters('backendAppServicePlanSkus')[copyIndex()].size]"
          },
          "aspInstances": {
            "value": "[parameters('backendAppServicePlanSkus')[copyIndex()].instances]"
          },
          "nonASETier": {
            "value": "[parameters('backendAppServicePlanSkus')[copyIndex()].tier]"
          }
        }
      }
    },
    {
      "apiVersion": "2022-09-01",
      "name": "shared-worker-app-service-plan",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[uri(variables('deploymentUrlBase'),'app-service-plan.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "appServicePlanName": {
            "value": "[variables('sharedWorkerAppServicePlanName')]"
          },
          "aspSize": {
            "value": "[parameters('sharedWorkerAppServicePlanSku').size]"
          },
          "aspInstances": {
            "value": "[parameters('sharedWorkerAppServicePlanSku').instances]"
          },
          "nonASETier": {
            "value": "[parameters('sharedWorkerAppServicePlanSku').tier]"
          }
        }
      }
    },
    {
      "apiVersion": "2022-09-01",
      "name": "service-bus",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[uri(variables('deploymentUrlBase'),'service-bus.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "serviceBusNamespaceName": {
            "value": "[variables('serviceBusNamespaceName')]"
          },
          "serviceBusQueues": {
            "value": [
              "deadletters"
            ]
          },
          "logAnalyticsWorkspaceName": {
            "value": "[parameters('logAnalyticsWorkspaceName')]"
          },
          "logAnalyticsWorkspaceResourceGroupName": {
            "value": "[parameters('logAnalyticsWorkspaceResourceGroupName')]"
          }
        }
      }
    },
    {
      "apiVersion": "2022-09-01",
      "name": "redis-cache",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[uri(variables('deploymentUrlBase'),'redis.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "redisCacheName": {
            "value": "[variables('sharedRedisCacheName')]"
          },
          "redisCacheSKU": {
            "value": "[parameters('sharedRedisCacheSKU')]"
          },
          "redisCacheFamily": {
            "value": "[parameters('sharedRedisCacheFamily')]"
          },
          "redisCacheCapacity": {
            "value": "[parameters('sharedRedisCacheCapacity')]"
          },
          "enableNonSslPort": {
            "value": false
          }
        }
      }
    },
    // {
    //   "apiVersion": "2022-09-01",
    //   "name": "cdn-profile",
    //   "type": "Microsoft.Resources/deployments",
    //   "properties": {
    //     "mode": "Incremental",
    //     "templateLink": {
    //       "uri": "[uri(variables('deploymentUrlBase'),'cdn-profile.json')]",
    //       "contentVersion": "1.0.0.0"
    //     },
    //     "parameters": {
    //       "cdnProfileName": {
    //         "value": "[variables('cdnProfileName')]"
    //       },
    //       "cdnSKU": {
    //         "value": "Standard_Verizon"
    //       }
    //     }
    //   }
    // },
    {
      "apiVersion": "2022-09-01",
      "name": "event-hub-namespace",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[uri(variables('deploymentUrlBase'),'event-hub-namespace.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "eventHubNamespaceName": {
            "value": "[variables('eventHubNamespaceName')]"
          },
          "eventHubTier": {
            "value": "Standard"
          },
          "eventHubCapacity": {
            "value": 1
          },
          "isAutoInflateEnabled": {
            "value": true
          },
          "maximumThroughputUnits": {
            "value": 20
          },
          "logAnalyticsWorkspaceName": {
            "value": "[parameters('logAnalyticsWorkspaceName')]"
          },
          "logAnalyticsWorkspaceResourceGroupName": {
            "value": "[parameters('logAnalyticsWorkspaceResourceGroupName')]"
          }
        }
      }
    },
    {
      "apiVersion": "2022-09-01",
      "name": "ai-search",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[uri(variables('deploymentUrlBase'),'azure-search.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "aiSearchName": {
            "value": "[variables('aiSearchName')]"
          },
          "aiSearchSku": {
            "value": "[parameters('aiSearchSku')]"
          },
          "aiSearchReplicaCount": {
            "value": "[parameters('aiSearchReplicaCount')]"
          },
          "aiSearchPartitionCount": {
            "value": "[parameters('aiSearchPartitionCount')]"
          }
        }
      }
    },
    {
      "apiVersion": "2022-09-01",
      "name": "ai-search-private-dns-zone",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[uri(variables('deploymentUrlBase'),'private-dns-zone.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "dnsZoneName": {
            "value": "[variables('aiSearchPrivateDnsZoneName')]"
          },
          "vnetId": {
            "value": "[resourceId(variables('resourceGroupName'), 'Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]"
          }
        }
      },
      "dependsOn": [
        "[variables('virtualNetworkDeploymentName')]"
      ]
    },
    {
      "apiVersion": "2022-09-01",
      "name": "ai-search-private-endpoint",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[uri(variables('deploymentUrlBase'),'private-endpoint.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "privateEndpointName": {
            "value": "[variables('aiSearchPrivateEndpointName')]"
          },
          "subnetId": {
            "value": "[reference(variables('virtualNetworkDeploymentName')).outputs.sharedAiSearchSubnetResourceId.value]"
          },
          "privateLinkGroupIds": {
            "value": [ "searchService" ]
          },
          "privateLinkServiceId": {
            "value": "[resourceId(variables('resourceGroupName'),'Microsoft.Search/searchServices',variables('aiSearchName'))]"
          },
          "privateDnsZoneId": {
            "value": "[resourceId(variables('resourceGroupName'),'Microsoft.Network/privateDnsZones',variables('aiSearchPrivateDnsZoneName'))]"
          }
        }
      },
      "dependsOn": [
        "[variables('virtualNetworkDeploymentName')]",
        "ai-search-private-dns-zone"
      ]
    },
    {
      "apiVersion": "2022-09-01",
      "name": "redis-private-dns-zone",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[uri(variables('deploymentUrlBase'),'private-dns-zone.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "dnsZoneName": {
            "value": "[variables('redisPrivateDnsZoneName')]"
          },
          "vnetId": {
            "value": "[resourceId(variables('resourceGroupName'), 'Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]"
          }
        }
      },
      "dependsOn": [
        "[variables('virtualNetworkDeploymentName')]"
      ]
    },
    {
      "apiVersion": "2022-09-01",
      "name": "shared-redis-private-endpoint",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[uri(variables('deploymentUrlBase'),'private-endpoint.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "privateEndpointName": {
            "value": "[variables('sharedRedisPrivateEndpointName')]"
          },
          "subnetId": {
            "value": "[reference(variables('virtualNetworkDeploymentName')).outputs.sharedRedisSubnetResourceId.value]"
          },
          "privateLinkGroupIds": {
            "value": [ "redisCache" ]
          },
          "privateLinkServiceId": {
            "value": "[resourceId(variables('resourceGroupName'),'Microsoft.Cache/Redis',variables('sharedRedisCacheName'))]"
          },
          "privateDnsZoneId": {
            "value": "[variables('redisPrivateDnsZoneId')]"
          }
        }
      },
      "dependsOn": [
        "[variables('virtualNetworkDeploymentName')]",
        "redis-private-dns-zone",
        "redis-cache"
      ]
    },
    {
      "apiVersion": "2022-09-01",
      "name": "redis-cache-reset-public-access",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[uri(variables('deploymentUrlBase'),'redis.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "redisCacheName": {
            "value": "[variables('sharedRedisCacheName')]"
          },
          "redisCacheSKU": {
            "value": "Standard"
          },
          "redisCacheFamily": {
            "value": "C"
          },
          "redisCacheCapacity": {
            "value": 1
          },
          "enableNonSslPort": {
            "value": false
          }
        }
      },
      "dependsOn": [
        "shared-redis-private-endpoint"
      ]
    },
    {
      "apiVersion": "2022-09-01",
      "name": "azure-monitor-private-link-scope",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": [
            {
              "type": "Microsoft.Insights/privateLinkScopes",
              "apiVersion": "2021-07-01-preview",
              "name": "[variables('amplsName')]",
              "location": "global",
              "properties": {
                "accessModeSettings": {
                  "queryAccessMode": "[parameters('amplsQueryAccessMode')]",
                  "ingestionAccessMode": "[parameters('amplsIngestionAccessMode')]"
                }
              }
            }
          ]
        }
      }
    },
    {
      "apiVersion": "2022-09-01",
      "name": "ampls-private-endpoint",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[uri(variables('deploymentUrlBase'),'private-endpoint.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "privateEndpointName": {
            "value": "[variables('amplsPrivateEndpointName')]"
          },
          "subnetId": {
            "value": "[reference(variables('virtualNetworkDeploymentName')).outputs.amplsSubnetResourceId.value]"
          },
          "privateLinkGroupIds": {
            "value": [ "azuremonitor" ]
          },
          "privateLinkServiceId": {
            "value": "[resourceId(variables('resourceGroupName'), 'Microsoft.Insights/privateLinkScopes', variables('amplsName'))]"
          }
        }
      },
      "dependsOn": [
        "[variables('virtualNetworkDeploymentName')]",
        "azure-monitor-private-link-scope"
      ]
    },
    {
      "apiVersion": "2022-09-01",
      "name": "[concat('ampls-private-dns-zone-', variables('amplsPrivateDnsZones')[copyIndex()])]",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[uri(variables('deploymentUrlBase'), 'private-dns-zone.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "dnsZoneName": {
            "value": "[variables('amplsPrivateDnsZones')[copyIndex()]]"
          },
          "vnetId": {
            "value": "[resourceId(variables('resourceGroupName'), 'Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]"
          }
        }
      },
      "copy": {
        "name": "amplsPrivateDnsZoneCopy",
        "count": "[length(variables('amplsPrivateDnsZones'))]"
      }
    },
    {
      "apiVersion": "2022-09-01",
      "name": "ampls-private-dns-zone-groups",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": [
            {
              "name": "[concat(variables('amplsPrivateEndpointName'),'/default')]",
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2022-01-01",
              "properties": {
                "copy": [
                  {
                    "name": "privateDnsZoneConfigs",
                    "count": "[length(variables('amplsPrivateDnsZones'))]",
                    "input": {
                      "name": "[variables('amplsPrivateDnsZones')[copyIndex('privateDnsZoneConfigs')]]",
                      "properties": {
                        "privateDnsZoneId": "[resourceId(variables('resourceGroupName'), 'Microsoft.Network/privateDnsZones', variables('amplsPrivateDnsZones')[copyIndex('privateDnsZoneConfigs')])]"
                      }
                    }
                  }
                ]
              }
            }
          ]
        }
      },
      "dependsOn": [
        "amplsPrivateDnsZoneCopy",
        "ampls-private-endpoint"
      ]
    },
    {
      "apiVersion": "2021-04-01",
      "name": "[concat(parameters('products')[copyIndex()], '-application-insights-', parameters('utcValue'))]",
      "type": "Microsoft.Resources/deployments",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('deploymentUrlBase'),'application-insights.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "appInsightsName": {
            "value": "[concat(variables('resourceNamePrefix'),'-', parameters('products')[copyIndex()], '-ai')]"
          },
          "logAnalyticsWorkspaceId": {
            "value": "[resourceId(parameters('logAnalyticsWorkspaceResourceGroupName'),'Microsoft.OperationalInsights/workspaces',parameters('logAnalyticsWorkspaceName'))]"
          }
        }
      },
      "copy": {
        "name": "productsLoop",
        "count": "[length(parameters('products'))]"
      }
    },
    {
      "apiVersion": "2017-05-10",
      "name": "route-table",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('deploymentUrlBase'),'route-table.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "routeTableName": {
            "value": "[variables('routeTableName')]"
          },
          "routeTableRoutes": {
            "value": "[parameters('routeTableRoutes')]"
          },
          "disableBgpRoutePropagation": {
            "value": "[parameters('disableBgpRoutePropagation')]"
          }
        }
      }
    }
  ],
  "outputs": {
    "sharedResourceGroupName": {
      "type": "string",
      "value": "[variables('resourceGroupName')]"
    },
    "loggingRedisSubnetResourceId": {
      "type": "string",
      "value": "[reference(variables('virtualNetworkDeploymentName')).outputs.loggingRedisSubnetResourceId.value]"
    },
    "redisPrivateDnsZoneId": {
      "type": "string",
      "value": "[variables('redisPrivateDnsZoneId')]"
    }
  }
}

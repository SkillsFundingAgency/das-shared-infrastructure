{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "resourceEnvironmentName": {
      "type": "string",
      "metadata": {
        "description": "Base environment name. E.g. DEV. PP, PRD, MO. ",
        "environmentVariable": "resourceEnvironmentName"
      }
    },
    "serviceName": {
      "type": "string",
      "defaultValue": "shared",
      "metadata": {
        "description": "Service name of the service. E.g shared infrastructure = shared.",
        "environmentVariable": "serviceName"
      }
    },
    "keyVaultSecretCertificateAccessObjectId": {
      "type": "string",
      "metadata": {
        "description": "Object Id of the Azure AD Object you want to grant Key Vault Secret and Certificate access to",
        "environmentVariable": "keyVaultSecretCertificateAccessObjectId"
      }
    },
    "keyVaultSecretAccessObjectIds": {
      "type": "array",
      "metadata": {
        "description": "Object Ids of the Azure AD Objects you want to grant Key Vault Secret access to",
        "environmentVariable": "keyVaultSecretAccessObjectIds"
      }
    },
    "microsoftAzureWebsitesRPObjectId": {
      "type": "string",
      "metadata": {
        "description": "Object Id of the Azure Websites RP",
        "environmentVariable": "microsoftAzureWebsitesRPObjectId"
      }
    },
    "backupManagementServiceObjectId": {
      "type": "string",
      "metadata": {
        "description": "Object Id for the backup management service",
        "environmentVariable": "backupManagementServiceObjectId"
      }
    },
    "diskEncryptionEnterpriseApplicationObjectId": {
      "type": "string",
      "metadata": {
        "description": "Object Id for the disk Encryption Enterprise Application",
        "environmentVariable": "diskEncryptionEnterpriseApplicationObjectId"
      }
    },
    "AKSEnterpriseApplicationObjectId": {
      "type": "string",
      "defaultValue": "Disabled",
      "metadata": {
        "description": "Object Id for the AKS Enterprise Application",
        "environmentVariable": "AKSEnterpriseApplicationObjectId"
      }
    },
    "AKSRouteTableName": {
      "type": "string",
      "defaultValue": "Disabled",
      "metadata": {
        "description": "Name of the AKS Route Table to be included in the DEV management subnet mgmt-sn-0",
        "environmentVariable": "AKSRouteTableName"
      }
    },
    "AKSRouteTableResourceGroupName": {
      "type": "string",
      "defaultValue": "Disabled",
      "metadata": {
        "description": "Name of the DEV Resource Group where the AKS Route Table resides, used for the resourceId function to get the AKS Route Table resource",
        "environmentVariable": "AKSRouteTableResourceGroupName"
      }
    },
    "firewallsNsgName": {
      "type": "string",
      "defaultValue": "Disabled",
      "metadata": {
        "description": "Name of the firewall NSG to be associated to the gateway subnet gw-sn-0",
        "environmentVariable": "firewallsNsgName"
      }
    },
    "environments": {
      "type": "array",
      "defaultValue": [
      ],
      "metadata": {
        "description": "String array of all environments in this subscription",
        "environmentVariable": "environmentNames"
      }
    },
    "sqlServerActiveDirectoryAdminLogin": {
      "type": "string",
      "metadata": {
        "description": "The active directory admin that will be assigned to the sql server",
        "environmentVariable": "sqlServerActiveDirectoryAdminLogin"
      }
    },
    "sqlServerActiveDirectoryAdminObjectId": {
      "type": "string",
      "metadata": {
        "description": "The object id of the active directory admin that will be assigned to the sql server",
        "environmentVariable": "sqlServerActiveDirectoryAdminObjectId"
      }
    },
    "threatDetectionEmailAddress": {
      "type": "string",
      "metadata": {
        "description": "The email address that threat alerts will be sent to",
        "environmentVariable": "threatDetectionEmailAddress"
      }
    },
    "databaseConfiguration": {
      "type": "object",
      "metadata": {
        "description": "Configuration object which describes the structure of failover groups",
        "environmentVariable": "databaseConfiguration"
      }
    },
    "virtualNetworkDeploy": {
      "type": "string",
      "defaultValue": "Disabled",
      "allowedValues": [
        "Disabled",
        "Enabled"
      ],
      "metadata": {
        "description": "Deploys the Virtual Network and deletes all subnets if Enabled https://github.com/Azure/azure-quickstart-templates/issues/2786",
        "environmentVariable": "virtualNetworkDeploy"
      }
    },
    "gatewaySubnetCount": {
      "type": "int",
      "defaultValue": 0,
      "maxValue": 5,
      "metadata": {
        "description": "The number of gateway subnets to provision",
        "environmentVariable": "gatewaySubnetCount"
      }
    },
    "managementSubnetCount": {
      "type": "int",
      "defaultValue": 1,
      "maxValue": 50,
      "metadata": {
        "description": "The number of management subnets to provision",
        "environmentVariable": "managementSubnetCount"
      }
    },
    "apimSubnetCount": {
      "type": "int",
      "defaultValue": 0,
      "maxValue": 5,
      "metadata": {
        "description": "The number of APIM subnets to provision",
        "environmentVariable": "apimSubnetCount"
      }
    },
    "frontendSubnetCount": {
      "type": "int",
      "defaultValue": 0,
      "maxValue": 5,
      "metadata": {
        "description": "The number of shared frontend app subnets to provision.",
        "environmentVariable": "frontendSubnetCount"
      }
    },
    "backendSubnetCount": {
      "type": "int",
      "defaultValue": 0,
      "maxValue": 5,
      "metadata": {
        "description": "The number of shared backend app subnets to provision.",
        "environmentVariable": "backendSubnetCount"
      }
    },
    "apimEndpointSubnetCount": {
      "type": "int",
      "defaultValue": 0,
      "maxValue": 5,
      "metadata": {
        "description": "The number of shared APIM endpoint app subnets to provision.",
        "environmentVariable": "apimEndpointSubnetCount"
      }
    },
    "sqlAdminPasswordSeed": {
      "type": "securestring",
      "metadata": {
        "description": "The seed used to generate passwords for sql server deployments.",
        "environmentVariable": "sqlAdminPasswordSeed"
      }
    },
    "frontEndAppServicePlanSku": {
      "type": "object",
      "defaultValue": {
        "tier": "Standard",
        "size": "2",
        "instances": 2
      },
      "metadata": {
        "description": "An object representing the sku of the app service plan.",
        "environmentVariable": "frontEndAppServicePlanSku"
      }
    },
    "backEndAppServicePlanSku": {
      "type": "object",
      "defaultValue": {
        "tier": "Standard",
        "size": "2",
        "instances": 2
      },
      "metadata": {
        "description": "An object representing the sku of the app service plan.",
        "environmentVariable": "backEndAppServicePlanSku"
      }
    },
    "sharedStorageAccountContainerArray": {
      "type": "array",
      "metadata": {
        "description": "An array of the blob container names to deploy to the shared storage account.",
        "environmentVariable": "sharedStorageAccountContainerArray"
      }
    },
    "logAnalyticsWorkspaceName": {
      "type": "string",
      "metadata": {
        "description": "The name of the Log Analytics workspace for the subscription.",
        "environmentVariable": "logAnalyticsWorkspaceName"
      }
    },
    "logAnalyticsWorkspaceSku": {
      "type": "string",
      "metadata": {
        "description": "The SKU of the Log Analytics workspace for the subscription.",
        "environmentVariable": "logAnalyticsWorkspaceSku"
      }
    },
    "logAnalyticsWorkspaceDataRetentionDays": {
      "type": "int",
      "metadata": {
        "description": "The number of days data is retained in the Log Analytics workspace for the subscription.",
        "environmentVariable": "logAnalyticsWorkspaceDataRetentionDays"
      }
    },
    "customDomainHostedZone": {
      "type": "string",
      "metadata": {
        "description": "The Hosted Zone used for the APIM DNS records.",
        "environmentVariable": "customDomainHostedZone"
      }
    },
    "apimInitialDeploy": {
      "type": "string",
      "metadata": {
        "description": "A string for the initial APIM deployment which requires system managed identity creation before then deploying custom hostname configuration.",
        "environmentVariable": "apimInitialDeploy"
      }
    },
    "apimLogsRetentionDays": {
      "type": "int",
      "defaultValue": 30,
      "metadata": {
        "description": "Number of days to retain the APIM logs within the Log Analytics Workspace.",
        "environmentVariable": "apimLogsRetentionDays"
      }
    },
    "apimPublisherEmail": {
      "type": "string",
      "metadata": {
        "description": "The publisher email of the APIM instance.",
        "environmentVariable": "apimPublisherEmail"
      }
    },
    "apimPublisherName": {
      "type": "string",
      "metadata": {
        "description": "The publisher name of the APIM instance.",
        "environmentVariable": "apimPublisherName"
      }
    },
    "apimPortalKeyVaultCertificateName": {
      "type": "string",
      "defaultValue": "Disabled",
      "metadata": {
        "description": "The Key vault certificate name for the Developer Portal custom domain of the APIM instance.",
        "environmentVariable": "apimPortalKeyVaultCertificateName"
      }
    },
    "apimGatewayKeyVaultCertificateName": {
      "type": "string",
      "defaultValue": "Disabled",
      "metadata": {
        "description": "The Key vault certificate for the Gateway custom domain of the APIM instance.",
        "environmentVariable": "apimGatewayKeyVaultCertificateName"
      }
    },
    "apimManagementKeyVaultCertificateName": {
      "type": "string",
      "defaultValue": "Disabled",
      "metadata": {
        "description": "The Key vault certificate for the Management custom domain of the APIM instance.",
        "environmentVariable": "apimManagementKeyVaultCertificateName"
      }
    },
    "apimGroupsArray": {
      "type": "array",
      "metadata": {
        "description": "Array of Groups for the APIM instance.",
        "environmentVariable": "apimGroupsArray"
      }
    },
    "apimProductsArray": {
      "type": "array",
      "metadata": {
        "description": "Array of Products for the APIM instance.",
        "environmentVariable": "apimProductsArray"
      }
    },
    "loggingRedisCacheSKU": {
      "type": "string",
      "defaultValue": "Standard",
      "metadata": {
        "environmentVariable": "loggingRedisCacheSKU"
      }
    },
    "loggingRedisCacheFamily": {
      "type": "string",
      "defaultValue": "C",
      "metadata": {
        "environmentVariable": "loggingRedisCacheFamily"
      }
    },
    "loggingRedisCacheCapacity": {
      "type": "int",
      "defaultValue": 1,
      "metadata": {
        "environmentVariable": "loggingRedisCacheCapacity"
      }
    }
  },
  "variables": {
    "deploymentUrlBase": "https://raw.githubusercontent.com/SkillsFundingAgency/das-platform-building-blocks/master/templates/",
    "sharedDeploymentUrlBase": "https://raw.githubusercontent.com/SkillsFundingAgency/das-shared-infrastructure/separate-subnet-deployment/",
    "resourceNamePrefix": "[toLower(concat('das-', parameters('resourceEnvironmentName'),'-', parameters('serviceName')))]",
    "loggingRedisCacheName": "[toLower(concat('das-', parameters('resourceEnvironmentName'),'-log-rds'))]",
    "keyVaultName": "[concat(variables('resourceNamePrefix'),'-kv')]",
    "classicStorageName": "[concat(replace(variables('resourceNamePrefix'), '-',''), 'deploystr')]",
    "automationAccountName": "[concat(variables('resourceNamePrefix'),'-aa')]",
    "mgmtManagementSubnetCount": 1,
    "virtualNetworkName": "[concat(variables('resourceNamePrefix'),'-vnet')]",
    "AKSKeyVaultAccessPolicy": [
      {
        "objectId": "[parameters('AKSEnterpriseApplicationObjectId')]",
        "tenantId": "[subscription().tenantId]",
        "permissions": {
          "secrets": [
            "Get"
          ],
          "certificates": [
            "Get"
          ]
        }
      }
    ],
    "keyVaultAccessPolicies": [
      {
        "objectId": "[parameters('microsoftAzureWebsitesRPObjectId')]",
        "tenantId": "[subscription().tenantId]",
        "permissions": {
          "secrets": [
            "Get"
          ]
        }
      },
      {
        "objectId": "[parameters('backupManagementServiceObjectId')]",
        "tenantId": "[subscription().tenantId]",
        "permissions": {
          "keys": [
            "Get",
            "List",
            "Backup"
          ],
          "secrets": [
            "Get",
            "List",
            "Backup"
          ]
        }
      },
      {
        "objectId": "[parameters('diskEncryptionEnterpriseApplicationObjectId')]",
        "tenantId": "[subscription().tenantId]",
        "permissions": {
          "keys": [
            "WrapKey"
          ],
          "secrets": [
            "Set"
          ]
        }
      },
      {
        "objectId": "[parameters('keyVaultSecretCertificateAccessObjectId')]",
        "tenantId": "[subscription().tenantId]",
        "permissions": {
          "secrets": [
            "Get",
            "List",
            "Set"
          ],
          "certificates": [
            "Get",
            "List",
            "Create",
            "GetIssuers",
            "ListIssuers"
          ]
        }
      }
    ],
    "copy": [
      {
        "name": "parameterKeyVaultSecretAccessPolicies",
        "count": "[length(parameters('keyVaultSecretAccessObjectIds'))]",
        "input": {
          "objectId": "[parameters('keyVaultSecretAccessObjectIds')[copyIndex('parameterKeyVaultSecretAccessPolicies')]]",
          "tenantId": "[subscription().tenantId]",
          "permissions": {
            "secrets": [
              "Get",
              "List",
              "Set"
            ]
          }
        }
      }
    ]
  },
  "functions": [
    {
      "namespace": "blocks",
      "members": {
        "getPasswordFromSeed": {
          "parameters": [
            {
              "name": "seed",
              "type": "string"
            },
            {
              "name": "name",
              "type": "string"
            },
            {
              "name": "environment",
              "type": "string"
            }
          ],
          "output": {
            "type": "string",
            "value": "[concat(toUpper(substring(parameters('environment'),0,1)), uniqueString(resourceGroup().id, parameters('name'), parameters('seed')), toLower(parameters('environment')), '!')]"
          }
        }
      }
    }
  ],
  "resources": [
    {
      "apiVersion": "2017-05-10",
      "name": "[concat('virtual-network-west-europe-', variables('resourceNamePrefix'))]",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('sharedDeploymentUrlBase'),'templates/network.template.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "virtualNetworkName": {
            "value": "[variables('virtualNetworkName')]"
          },
          "virtualNetworkDeploy": {
            "value": "[parameters('virtualNetworkDeploy')]"
          },
          "managementSubnetCount": {
            "value": "[variables('mgmtManagementSubnetCount')]"
          },
          "virtualNetworkAddressSpacePrefix": {
            "value": "10.0"
          },
          "AKSRouteTableName": {
            "value": "[parameters('AKSRouteTableName')]"
          },
          "AKSRouteTableResourceGroupName": {
            "value": "[parameters('AKSRouteTableResourceGroupName')]"
          }
        }
      }
    },
    {
      "apiVersion": "2017-05-10",
      "name": "key-vault",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('deploymentUrlBase'),'keyvault.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "keyVaultName": {
            "value": "[variables('keyVaultName')]"
          },
          "keyVaultAccessPolicies": {
            "value": "[if(equals(parameters('AKSEnterpriseApplicationObjectId'),'Disabled'),concat(variables('KeyVaultAccessPolicies'),variables('parameterKeyVaultSecretAccessPolicies')),concat(variables('KeyVaultAccessPolicies'),variables('parameterKeyVaultSecretAccessPolicies'),variables('AKSKeyVaultAccessPolicy')))]"
          },
          "enabledForDiskEncryption": {
            "value": true
          },
          "enabledForTemplateDeployment": {
            "value": true
          },
          "enableSoftDelete": {
            "value": true
          }
        }
      }
    },
    {
      "apiVersion": "2017-05-10",
      "name": "[concat('sql-server-key-vault-secrets-', parameters('environments')[copyIndex()])]",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('deploymentUrlBase'),'keyvault-secret.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "keyVaultName": {
            "value": "[variables('keyVaultName')]"
          },
          "secretName": {
            "value": "[toLower(concat('das-', parameters('environments')[copyIndex()], '-shared-sql'))]"
          },
          "secretValue": {
            "value": "[blocks.getPasswordFromSeed(parameters('sqlAdminPasswordSeed'), toLower(concat('das-', parameters('environments')[copyIndex()], '-shared-sql')), uniqueString(parameters('environments')[copyIndex()]))]"
          }
        }
      },
      "copy": {
        "name": "secretsCopy",
        "count": "[length(parameters('environments'))]"
      },
      "dependsOn": [
        "key-vault"
      ]
    },
    {
      "apiVersion": "2017-05-10",
      "name": "log-analytics-workspace",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('deploymentUrlBase'),'log-analytics-workspace.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "logAnalyticsWorkspaceName": {
            "value": "[parameters('logAnalyticsWorkspaceName')]"
          },
          "logAnalyticsWorkspaceSku": {
            "value": "[parameters('logAnalyticsWorkspaceSku')]"
          },
          "dataRetentionDays": {
            "value": "[parameters('logAnalyticsWorkspaceDataRetentionDays')]"
          }
        }
      }
    },
    {
      "apiVersion": "2017-05-10",
      "name": "classic-storage-account",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('deploymentUrlBase'),'storage-account-classic.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "storageAccountName": {
            "value": "[variables('classicStorageName')]"
          }
        }
      }
    },
    {
      "apiVersion": "2017-05-10",
      "name": "[toLower(concat(parameters('environments')[copyIndex()], '-shared-environment-infrastructure'))]",
      "type": "Microsoft.Resources/deployments",
      "resourceGroup": "[toLower(concat('das-', parameters('environments')[copyIndex()], '-shared-rg'))]",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('sharedDeploymentUrlBase'), 'templates/environment.template.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "environmentName": {
            "value": "[toUpper(parameters('environments')[copyIndex()])]"
          },
          "sharedManagementResourceGroup": {
            "value": "[resourceGroup().name]"
          },
          "sharedKeyVaultName": {
            "value": "[variables('keyVaultName')]"
          },
          "sharedKeyVaultId": {
            "value": "[reference('key-vault').outputs.KeyVaultResourceId.value]"
          },
          "sqlServerAdminPasswordSecretName": {
            "value": "[toLower(concat('das-', parameters('environments')[copyIndex()], '-shared-sql'))]"
          },
          "sqlServerActiveDirectoryAdminLogin": {
            "value": "[parameters('sqlServerActiveDirectoryAdminLogin')]"
          },
          "sqlServerActiveDirectoryAdminObjectId": {
            "value": "[parameters('sqlServerActiveDirectoryAdminObjectId')]"
          },
          "threatDetectionEmailAddress": {
            "value": "[parameters('threatDetectionEmailAddress')]"
          },
          "databaseConfiguration": {
            "value": "[parameters('databaseConfiguration')]"
          },
          "virtualNetworkAddressSpacePrefix": {
            "value": "[concat('10.', copyIndex(1))]"
          },
          "virtualNetworkDeploy": {
            "value": "[parameters('virtualNetworkDeploy')]"
          },
          "gatewaySubnetCount": {
            "value": "[parameters('gatewaySubnetCount')]"
          },
          "managementSubnetCount": {
            "value": "[parameters('managementSubnetCount')]"
          },
          "apimSubnetCount": {
            "value": "[parameters('apimSubnetCount')]"
          },
          "frontendSubnetCount": {
            "value": "[parameters('frontendSubnetCount')]"
          },
          "backendSubnetCount": {
            "value": "[parameters('backendSubnetCount')]"
          },
          "apimEndpointSubnetCount": {
            "value": "[parameters('apimEndpointSubnetCount')]"
          },
          "firewallsNsgName": {
            "value": "[parameters('firewallsNsgName')]"
          },
          "frontEndAppServicePlanSku": {
            "value": "[parameters('frontEndAppServicePlanSku')]"
          },
          "backEndAppServicePlanSku": {
            "value": "[parameters('backEndAppServicePlanSku')]"
          },
          "sharedStorageAccountContainerArray": {
            "value": "[parameters('sharedStorageAccountContainerArray')]"
          },
          "logAnalyticsWorkspaceName": {
            "value": "[parameters('logAnalyticsWorkspaceName')]"
          },
          "customDomainHostedZone": {
            "value": "[parameters('customDomainHostedZone')]"
          },
          "apimInitialDeploy": {
            "value": "[parameters('apimInitialDeploy')]"
          },
          "apimLogsRetentionDays": {
            "value": "[parameters('apimLogsRetentionDays')]"
          },
          "apimPublisherEmail": {
            "value": "[parameters('apimPublisherEmail')]"
          },
          "apimPublisherName": {
            "value": "[parameters('apimPublisherName')]"
          },
          "apimPortalKeyVaultCertificateName": {
            "value": "[parameters('apimPortalKeyVaultCertificateName')]"
          },
          "apimGatewayKeyVaultCertificateName": {
            "value": "[parameters('apimGatewayKeyVaultCertificateName')]"
          },
          "apimManagementKeyVaultCertificateName": {
            "value": "[parameters('apimManagementKeyVaultCertificateName')]"
          },
          "apimGroupsArray": {
            "value": "[parameters('apimGroupsArray')]"
          },
          "apimProductsArray": {
            "value": "[parameters('apimProductsArray')]"
          }
        }
      },
      "copy": {
        "name": "environmentCopy",
        "count": "[length(parameters('environments'))]"
      },
      "dependsOn": [
        "key-vault",
        "secretsCopy",
        "log-analytics-workspace"
      ]
    },
    {
      "apiVersion": "2017-05-10",
      "name": "azure-automation",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('deploymentUrlBase'),'automation-account.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "automationAccountName": {
            "value": "[variables('automationAccountName')]"
          }
        }
      }
    },
    {
      "apiVersion": "2017-05-10",
      "name": "logging-redis-cache",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('deploymentUrlBase'),'redis.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "redisCacheName": {
            "value": "[variables('loggingRedisCacheName')]"
          },
          "redisCacheSKU": {
            "value": "[parameters('loggingRedisCacheSKU')]"
          },
          "redisCacheFamily": {
            "value": "[parameters('loggingRedisCacheFamily')]"
          },
          "redisCacheCapacity": {
            "value": "[parameters('loggingRedisCacheCapacity')]"
          },
          "enableNonSslPort": {
            "value": false
          }
        }
      }
    }
  ],
  "outputs": {
  }
}

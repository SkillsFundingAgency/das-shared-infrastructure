{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "resourceEnvironmentName": {
      "type": "string",
      "metadata": {
        "description": "Base environment name. E.g. DEV. PP, PRD, MO. ",
        "environmentVariable": "resourceEnvironmentName"
      }
    },
    "sharedRedisCacheSKU": {
      "type": "string",
      "defaultValue": "Standard",
      "metadata": {
        "description": "The type of Redis cache to deploy",
        "environmentVariable": "sharedRedisCacheSKU"
      }
    },
    "sharedRedisCacheFamily": {
      "type": "string",
      "defaultValue": "C",
      "metadata": {
        "description": "The SKU family to use",
        "environmentVariable": "sharedRedisCacheFamily"
      }
    },
    "sharedRedisCacheCapacity": {
      "type": "int",
      "defaultValue": 1,
      "metadata": {
        "description": "The size of the Redis cache to deploy",
        "environmentVariable": "sharedRedisCacheCapacity"
      }
    },
    "serviceName": {
      "type": "string",
      "defaultValue": "shared",
      "metadata": {
        "description": "Service name of the service. E.g shared infrastructure = shared.",
        "environmentVariable": "serviceName"
      }
    },
    "keyVaultKeySecretCertificateAccessObjectId": {
      "type": "string",
      "metadata": {
        "description": "Object Id of the Azure AD Object you want to grant Key Vault Key, Secret and Certificate access to",
        "environmentVariable": "keyVaultKeySecretCertificateAccessObjectId"
      }
    },
    "keyVaultGetAccessObjectIds": {
      "type": "array",
      "metadata": {
        "description": "Object Ids of the Azure AD Objects you want to grant Key Vault Get Secret and Get Certificate access to",
        "environmentVariable": "keyVaultGetAccessObjectIds"
      }
    },
    "keyVaultGetListAccessObjectIds": {
      "type": "array",
      "metadata": {
        "description": "Object Ids of the Azure AD Objects you want to grant Key Vault Get Secret, List Secret, Get Certificate and List Certificate access to",
        "environmentVariable": "keyVaultGetListAccessObjectIds"
      }
    },
    "microsoftAzureWebsitesRPObjectId": {
      "type": "string",
      "metadata": {
        "description": "Object Id of the Azure Websites RP",
        "environmentVariable": "microsoftAzureWebsitesRPObjectId"
      }
    },
    "backupManagementServiceObjectId": {
      "type": "string",
      "metadata": {
        "description": "Object Id for the backup management service",
        "environmentVariable": "backupManagementServiceObjectId"
      }
    },
    "firewallsNsgName": {
      "type": "string",
      "defaultValue": "Disabled",
      "metadata": {
        "description": "Name of the firewall NSG to be associated to the gateway subnet gw-sn-0",
        "environmentVariable": "firewallsNsgName"
      }
    },
    "environments": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "String array of all environments in this subscription",
        "environmentVariable": "environmentNames"
      }
    },
    "sqlServerActiveDirectoryAdminLogin": {
      "type": "string",
      "metadata": {
        "description": "The active directory admin that will be assigned to the sql server",
        "environmentVariable": "sqlServerActiveDirectoryAdminLogin"
      }
    },
    "sqlServerActiveDirectoryAdminObjectId": {
      "type": "string",
      "metadata": {
        "description": "The object id of the active directory admin that will be assigned to the sql server",
        "environmentVariable": "sqlServerActiveDirectoryAdminObjectId"
      }
    },
    "threatDetectionEmailAddress": {
      "type": "string",
      "metadata": {
        "description": "The email address that threat alerts will be sent to",
        "environmentVariable": "threatDetectionEmailAddress"
      }
    },
    "databaseConfiguration": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Configuration object which describes the structure of failover groups",
        "environmentVariable": "databaseConfiguration"
      }
    },
    "virtualNetworkDeploy": {
      "type": "string",
      "defaultValue": "Disabled",
      "allowedValues": [
        "Disabled",
        "Enabled"
      ],
      "metadata": {
        "description": "Deploys the Virtual Network and deletes all subnets if Enabled https://github.com/Azure/azure-quickstart-templates/issues/2786",
        "environmentVariable": "virtualNetworkDeploy"
      }
    },
    "gatewaySubnetCount": {
      "type": "int",
      "defaultValue": 1,
      "minValue": 0,
      "maxValue": 5,
      "metadata": {
        "description": "The number of gateway subnets to provision",
        "environmentVariable": "gatewaySubnetCount"
      }
    },
    "managementSubnetCount": {
      "type": "int",
      "defaultValue": 1,
      "minValue": 0,
      "maxValue": 50,
      "metadata": {
        "description": "The number of management subnets to provision",
        "environmentVariable": "managementSubnetCount"
      }
    },
    "frontendSubnetCount": {
      "type": "int",
      "defaultValue": 1,
      "minValue": 0,
      "maxValue": 5,
      "metadata": {
        "description": "The number of shared frontend app subnets to provision.",
        "environmentVariable": "frontendSubnetCount"
      }
    },
    "backendSubnetCount": {
      "type": "int",
      "defaultValue": 1,
      "minValue": 0,
      "maxValue": 5,
      "metadata": {
        "description": "The number of shared backend app subnets to provision.",
        "environmentVariable": "backendSubnetCount"
      }
    },
    "sharedWorkerSubnetCount": {
      "type": "int",
      "defaultValue": 1,
      "minValue": 0,
      "maxValue": 5,
      "metadata": {
        "description": "The number of shared worker app subnets to provision.",
        "environmentVariable": "sharedWorkerSubnetCount"
      }
    },
    "sqlAdminPasswordSeed": {
      "type": "securestring",
      "metadata": {
        "description": "The seed used to generate passwords for sql server deployments.",
        "environmentVariable": "sqlAdminPasswordSeed"
      }
    },
    "frontEndAppServicePlanSku": {
      "type": "object",
      "defaultValue": {
      },
      "metadata": {
        "description": "An object representing the sku of the app service plan(s).",
        "environmentVariable": "frontEndAppServicePlanSku"
      }
    },
    "frontendAppServicePlanSkus": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Takes an array of objects: '[{\"identifier\": 0,\"tier\": \"Basic\", \"size\": \"1\",\"instances\": 1}]. Removing the backslash. The identifier helps map the values to the deployed ASP.",
        "environmentVariable": "frontendAppServicePlanSkus"
      }
    },
    "backEndAppServicePlanSku": {
      "type": "object",
      "defaultValue": {
      },
      "metadata": {
        "description": "An object representing the sku of the app service plan(s).",
        "environmentVariable": "backEndAppServicePlanSku"
      }
    },
    "backendAppServicePlanSkus": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Takes an array of objects: '[{\"identifier\": 0,\"tier\": \"Basic\", \"size\": \"1\",\"instances\": 1}]. Removing the backslash. The identifier helps map the values to the deployed ASP.",
        "environmentVariable": "backendAppServicePlanSkus"
      }
    },
    "sharedWorkerAppServicePlanSku": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "An object representing the sku of the app service plan(s).",
        "environmentVariable": "sharedWorkerAppServicePlanSku"
      }
    },
    "aiSearchSku": {
      "type": "string",
      "defaultValue": "basic",
      "metadata": {
        "description": "The pricing tier of the search service you want to create (for example, basic or standard).",
        "environmentVariable": "aiSearchSku"
      }
    },
    "aiSearchReplicaCount": {
      "type": "int",
      "defaultValue": 1,
      "metadata": {
        "description": "Replicas distribute search workloads across the service. You need 2 or more to support high availability (applies to Basic and Standard only).",
        "environmentVariable": "aiSearchReplicaCount"
      }
    },
    "aiSearchPartitionCount": {
      "type": "int",
      "defaultValue": 1,
      "metadata": {
        "description": "Partitions allow for scaling of document count as well as faster indexing by sharding your index over multiple Azure Search units.",
        "environmentVariable": "aiSearchPartitionCount"
      }
    },
    "sharedStorageAccountContainerArray": {
      "type": "array",
      "metadata": {
        "description": "An array of the blob container names to deploy to the shared storage account.",
        "environmentVariable": "sharedStorageAccountContainerArray"
      }
    },
    "keyVaultAllowedIpAddressesList": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "List of allowed Public IP addresses for Keyvault.",
        "environmentVariable": "keyVaultAllowedIpAddressesList"
      }
    },
    "keyVaultAllowedSubnetsList": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "List of allowed Subnets for Keyvault.",
        "environmentVariable": "keyVaultAllowedSubnetsList"
      }
    },
    "logAnalyticsWorkspaceName": {
      "type": "string",
      "metadata": {
        "description": "The name of the Log Analytics workspace for the subscription.",
        "environmentVariable": "logAnalyticsWorkspaceName"
      }
    },
    "logAnalyticsWorkspaceSku": {
      "type": "string",
      "metadata": {
        "description": "The SKU of the Log Analytics workspace for the subscription.",
        "environmentVariable": "logAnalyticsWorkspaceSku"
      }
    },
    "logAnalyticsWorkspaceDataRetentionDays": {
      "type": "int",
      "metadata": {
        "description": "The number of days data is retained in the Log Analytics workspace for the subscription.",
        "environmentVariable": "logAnalyticsWorkspaceDataRetentionDays"
      }
    },
    "loggingRedisCacheSKU": {
      "type": "string",
      "defaultValue": "Standard",
      "metadata": {
        "environmentVariable": "loggingRedisCacheSKU"
      }
    },
    "loggingRedisCacheFamily": {
      "type": "string",
      "defaultValue": "C",
      "metadata": {
        "environmentVariable": "loggingRedisCacheFamily"
      }
    },
    "loggingRedisCacheCapacity": {
      "type": "int",
      "defaultValue": 1,
      "metadata": {
        "environmentVariable": "loggingRedisCacheCapacity"
      }
    },
    "gatewaySubnetName": {
      "type": "string",
      "metadata": {
        "description": "Gateway subnet to allow on shared keyvault used by variable keyVaultAllowedGatewaySubnetsCopy",
        "environmentVariable": "gatewaySubnetName"
      }
    },
    "products": {
      "type": "array",
      "metadata": {
        "environmentVariable": "products"
      }
    },
    "routeTableRoutes": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Array of routes to be added to route table",
        "environmentVariable": "routeTableRoutes"
      }
    }
  },
  "variables": {
    "deploymentUrlBase": "https://raw.githubusercontent.com/SkillsFundingAgency/das-platform-building-blocks/master/templates/",
    "sharedDeploymentUrlBase": "https://raw.githubusercontent.com/SkillsFundingAgency/das-shared-infrastructure/master/",
    "resourceNamePrefix": "[toLower(concat('das-', parameters('resourceEnvironmentName'),'-', parameters('serviceName')))]",
    "loggingRedisCacheName": "[toLower(concat('das-', parameters('resourceEnvironmentName'),'-log-rds'))]",
    "keyVaultName": "[concat(variables('resourceNamePrefix'),'-kv')]",
    "automationAccountName": "[concat(variables('resourceNamePrefix'),'-aa')]",
    "mgmtManagementSubnetCount": 1,
    "virtualNetworkName": "[concat(variables('resourceNamePrefix'),'-vnet')]",
    "resourceGroupName": "[resourceGroup().name]",
    "keyVaultAccessPolicies": [
      {
        "objectId": "[parameters('microsoftAzureWebsitesRPObjectId')]",
        "tenantId": "[subscription().tenantId]",
        "permissions": {
          "secrets": [
            "Get"
          ]
        }
      },
      {
        "objectId": "[parameters('backupManagementServiceObjectId')]",
        "tenantId": "[subscription().tenantId]",
        "permissions": {
          "keys": [
            "Get",
            "List",
            "Backup"
          ],
          "secrets": [
            "Get",
            "List",
            "Backup"
          ]
        }
      },
      {
        "objectId": "[parameters('keyVaultKeySecretCertificateAccessObjectId')]",
        "tenantId": "[subscription().tenantId]",
        "permissions": {
          "keys": [
            "Get",
            "Decrypt",
            "Encrypt"
          ],
          "secrets": [
            "Get",
            "List",
            "Set"
          ],
          "certificates": [
            "Get",
            "List",
            "Create",
            "GetIssuers",
            "ListIssuers"
          ]
        }
      }
    ],
    "copy": [
      {
        "name": "keyVaultGetAccessPoliciesCopy",
        "count": "[length(parameters('keyVaultGetAccessObjectIds'))]",
        "input": {
          "objectId": "[parameters('keyVaultGetAccessObjectIds')[copyIndex('keyVaultGetAccessPoliciesCopy')]]",
          "tenantId": "[subscription().tenantId]",
          "permissions": {
            "secrets": [
              "Get"
            ],
            "certificates": [
              "Get"
            ]
          }
        }
      },
      {
        "name": "keyVaultGetListAccessPoliciesCopy",
        "count": "[length(parameters('keyVaultGetListAccessObjectIds'))]",
        "input": {
          "objectId": "[parameters('keyVaultGetListAccessObjectIds')[copyIndex('keyVaultGetListAccessPoliciesCopy')]]",
          "tenantId": "[subscription().tenantId]",
          "permissions": {
            "secrets": [
              "Get",
              "List"
            ],
            "certificates": [
              "Get",
              "List"
            ]
          }
        }
      },
      {
        "name": "keyVaultAllowedGatewaySubnetsCopy",
        "count": "[length(parameters('environments'))]",
        "input": "[resourceId(concat('das-',parameters('environments')[copyIndex('keyVaultAllowedGatewaySubnetsCopy')],'-shared-rg'),'Microsoft.Network/virtualNetworks/subnets',concat('das-',parameters('environments')[copyIndex('keyVaultAllowedGatewaySubnetsCopy')],'-shared-vnet'),parameters('gatewaySubnetName'))]"
      }
    ],
    "keyVaultAllowedSubnetsArray": "[concat(variables('keyVaultAllowedGatewaySubnetsCopy'),parameters('keyvaultAllowedSubnetsList'))]"
  },
  "resources": [
    {
      "apiVersion": "2022-09-01",
      "name": "[concat('virtual-network-west-europe-', variables('resourceNamePrefix'))]",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[uri(variables('sharedDeploymentUrlBase'),'templates/network.template.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "virtualNetworkName": {
            "value": "[variables('virtualNetworkName')]"
          },
          "virtualNetworkDeploy": {
            "value": "[parameters('virtualNetworkDeploy')]"
          },
          "managementSubnetCount": {
            "value": "[variables('mgmtManagementSubnetCount')]"
          },
          "virtualNetworkAddressSpacePrefix": {
            "value": "10.0"
          }
        }
      }
    },
    {
      "apiVersion": "2022-09-01",
      "name": "key-vault",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[uri(variables('deploymentUrlBase'),'keyvault.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "keyVaultName": {
            "value": "[variables('keyVaultName')]"
          },
          "keyVaultAccessPolicies": {
            "value": "[concat(variables('KeyVaultAccessPolicies'),variables('keyVaultGetAccessPoliciesCopy'),variables('keyVaultGetListAccessPoliciesCopy'))]"
          },
          "enabledForTemplateDeployment": {
            "value": true
          },
          "enableFirewall": {
            "value": true
          },
          "allowedIpAddressesList": {
            "value": "[parameters('keyVaultAllowedIpAddressesList')]"
          },
          "allowTrustedMicrosoftServices": {
            "value": true
          },
          "logAnalyticsWorkspaceName": {
            "value": "[parameters('logAnalyticsWorkspaceName')]"
          },
          "logAnalyticsWorkspaceResourceGroupName": {
            "value": "[variables('resourceGroupName')]"
          }
        }
      },
      "dependsOn": [
        "log-analytics-workspace"
      ]
    },
    {
      "apiVersion": "2022-09-01",
      "name": "key-vault-vnet-acl",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[uri(variables('deploymentUrlBase'),'keyvault.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "keyVaultName": {
            "value": "[variables('keyVaultName')]"
          },
          "keyVaultAccessPolicies": {
            "value": "[concat(variables('KeyVaultAccessPolicies'),variables('keyVaultGetAccessPoliciesCopy'),variables('keyVaultGetListAccessPoliciesCopy'))]"
          },
          "enabledForTemplateDeployment": {
            "value": true
          },
          "enableFirewall": {
            "value": true
          },
          "allowedIpAddressesList": {
            "value": "[parameters('keyVaultAllowedIpAddressesList')]"
          },
          "subnetResourceIdList": {
            "value": "[variables('keyVaultAllowedSubnetsArray')]"
          },
          "allowTrustedMicrosoftServices": {
            "value": true
          },
          "logAnalyticsWorkspaceName": {
            "value": "[parameters('logAnalyticsWorkspaceName')]"
          },
          "logAnalyticsWorkspaceResourceGroupName": {
            "value": "[variables('resourceGroupName')]"
          }
        }
      },
      "dependsOn": [
        "log-analytics-workspace",
        "environmentCopy"
      ]
    },

    {
      "apiVersion": "2022-09-01",
      "name": "log-analytics-workspace",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[uri(variables('deploymentUrlBase'),'log-analytics-workspace.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "logAnalyticsWorkspaceName": {
            "value": "[parameters('logAnalyticsWorkspaceName')]"
          },
          "logAnalyticsWorkspaceSku": {
            "value": "[parameters('logAnalyticsWorkspaceSku')]"
          },
          "dataRetentionDays": {
            "value": "[parameters('logAnalyticsWorkspaceDataRetentionDays')]"
          }
        }
      }
    },
    {
      "apiVersion": "2022-09-01",
      "name": "[toLower(concat(parameters('environments')[copyIndex()], '-shared-environment-infrastructure'))]",
      "type": "Microsoft.Resources/deployments",
      "resourceGroup": "[toLower(concat('das-', parameters('environments')[copyIndex()], '-shared-rg'))]",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[uri(variables('sharedDeploymentUrlBase'), 'templates/environment.template.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "environmentName": {
            "value": "[toUpper(parameters('environments')[copyIndex()])]"
          },
          "sharedRedisCacheSKU": {
            "value": "[parameters('sharedRedisCacheSKU')]"
          },
          "sharedRedisCacheFamily": {
            "value": "[parameters('sharedRedisCacheFamily')]"
          },
          "sharedRedisCacheCapacity": {
            "value": "[parameters('sharedRedisCacheCapacity')]"
          },
          "sharedManagementResourceGroup": {
            "value": "[variables('resourceGroupName')]"
          },
          "sharedKeyVaultName": {
            "value": "[variables('keyVaultName')]"
          },
          "sharedKeyVaultId": {
            "value": "[reference('key-vault').outputs.KeyVaultResourceId.value]"
          },
          "sqlServerActiveDirectoryAdminLogin": {
            "value": "[parameters('sqlServerActiveDirectoryAdminLogin')]"
          },
          "sqlServerActiveDirectoryAdminObjectId": {
            "value": "[parameters('sqlServerActiveDirectoryAdminObjectId')]"
          },
          "threatDetectionEmailAddress": {
            "value": "[parameters('threatDetectionEmailAddress')]"
          },
          "databaseConfiguration": {
            "value": "[parameters('databaseConfiguration')]"
          },
          "virtualNetworkAddressSpacePrefix": {
            "value": "[concat('10.', copyIndex(1))]"
          },
          "virtualNetworkDeploy": {
            "value": "[parameters('virtualNetworkDeploy')]"
          },
          "gatewaySubnetCount": {
            "value": "[parameters('gatewaySubnetCount')]"
          },
          "managementSubnetCount": {
            "value": "[parameters('managementSubnetCount')]"
          },
          "frontendSubnetCount": {
            "value": "[parameters('frontendSubnetCount')]"
          },
          "backendSubnetCount": {
            "value": "[parameters('backendSubnetCount')]"
          },
          "sharedWorkerSubnetCount": {
            "value": "[parameters('sharedWorkerSubnetCount')]"
          },
          "firewallsNsgName": {
            "value": "[parameters('firewallsNsgName')]"
          },
          "frontEndAppServicePlanSku": {
            "value": "[parameters('frontEndAppServicePlanSku')[toUpper(parameters('environments')[copyIndex()])]]"
          },
          "backEndAppServicePlanSku": {
            "value": "[parameters('backEndAppServicePlanSku')[toUpper(parameters('environments')[copyIndex()])]]"
          },
          "backendAppServicePlanSkus": {
            "value": "[parameters('backendAppServicePlanSkus')]"
          },
          "frontendAppServicePlanSkus": {
            "value": "[parameters('frontendAppServicePlanSkus')]"
          },
          "sharedWorkerAppServicePlanSku": {
            "value": "[parameters('sharedWorkerAppServicePlanSku')[toUpper(parameters('environments')[copyIndex()])]]"
          },
          "aiSearchSku": {
            "value": "[parameters('aiSearchSku')]"
          },
          "aiSearchReplicaCount": {
            "value": "[parameters('aiSearchReplicaCount')]"
          },
          "aiSearchPartitionCount": {
            "value": "[parameters('aiSearchPartitionCount')]"
          },
          "sharedStorageAccountContainerArray": {
            "value": "[parameters('sharedStorageAccountContainerArray')]"
          },
          "logAnalyticsWorkspaceName": {
            "value": "[parameters('logAnalyticsWorkspaceName')]"
          },
          "logAnalyticsWorkspaceResourceGroupName": {
            "value": "[variables('resourceGroupName')]"
          },
          "products": {
            "value": "[parameters('products')]"
          },
          "sqlAdminPasswordSeed": {
            "value": "[parameters('sqlAdminPasswordSeed')]"
          },
          "routeTableRoutes": {
            "value": "[parameters('routeTableRoutes')[toLower(parameters('environments')[copyIndex()])]]"
          }
        }
      },
      "copy": {
        "name": "environmentCopy",
        "count": "[length(parameters('environments'))]"
      },
      "dependsOn": [
        "key-vault",
        "log-analytics-workspace"
      ]
    },
    {
      "apiVersion": "2022-09-01",
      "name": "azure-automation",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[uri(variables('deploymentUrlBase'),'automation-account.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "automationAccountName": {
            "value": "[variables('automationAccountName')]"
          }
        }
      }
    },
    {
      "apiVersion": "2022-09-01",
      "name": "logging-redis-cache",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[uri(variables('deploymentUrlBase'),'redis.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "redisCacheName": {
            "value": "[variables('loggingRedisCacheName')]"
          },
          "redisCacheSKU": {
            "value": "[parameters('loggingRedisCacheSKU')]"
          },
          "redisCacheFamily": {
            "value": "[parameters('loggingRedisCacheFamily')]"
          },
          "redisCacheCapacity": {
            "value": "[parameters('loggingRedisCacheCapacity')]"
          },
          "enableNonSslPort": {
            "value": false
          }
        }
      }
    },
    {
      "apiVersion": "2022-09-01",
      "name": "[toLower(concat(parameters('environments')[copyIndex()], '-logging-redis-private-endpoint'))]",
      "type": "Microsoft.Resources/deployments",
      "resourceGroup": "[toLower(concat('das-', parameters('environments')[copyIndex()], '-shared-rg'))]",
      "comments": "Private endpoint added here instead of environment template to reduce time publicNetworkAccess is set to Disabled",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[uri(variables('deploymentUrlBase'),'private-endpoint.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "privateEndpointName": {
            "value": "[concat(variables('loggingRedisCacheName'), if(equals(toLower(parameters('resourceEnvironmentName')), 'dev'), concat( '-', toLower(parameters('environments')[copyIndex()])), ''), '-pe')]"
          },
          "subnetId": {
            "value": "[reference(toLower(concat(parameters('environments')[copyIndex()], '-shared-environment-infrastructure'))).outputs.loggingRedisSubnetResourceId.value]"
          },
          "privateLinkGroupIds": {
            "value": [ "redisCache" ]
          },
          "privateLinkServiceId": {
            "value": "[resourceId(variables('resourceGroupName'), 'Microsoft.Cache/Redis', variables('loggingRedisCacheName'))]"
          },
          "privateDnsZoneId": {
            "value": "[reference(toLower(concat(parameters('environments')[copyIndex()], '-shared-environment-infrastructure'))).outputs.redisPrivateDnsZoneId.value]"
          }
        }
      },
      "copy": {
        "name": "loggingRedisPrivateEndpointCopy",
        "count": "[length(parameters('environments'))]"
      }
    },
    {
      "apiVersion": "2022-09-01",
      "name": "logging-redis-cache-reset-public-access",
      "type": "Microsoft.Resources/deployments",
      "comments": "Toggles public access to it's original value as soon as the private endpoint deployment succeeds",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[uri(variables('deploymentUrlBase'),'redis.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "redisCacheName": {
            "value": "[variables('loggingRedisCacheName')]"
          },
          "redisCacheSKU": {
            "value": "[parameters('loggingRedisCacheSKU')]"
          },
          "redisCacheFamily": {
            "value": "[parameters('loggingRedisCacheFamily')]"
          },
          "redisCacheCapacity": {
            "value": "[parameters('loggingRedisCacheCapacity')]"
          },
          "enableNonSslPort": {
            "value": false
          }
        }
      },
      "dependsOn": [
        "loggingRedisPrivateEndpointCopy"
      ]
    }
  ],
  "outputs": {}
}
